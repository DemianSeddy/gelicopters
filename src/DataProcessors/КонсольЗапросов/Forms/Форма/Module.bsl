&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КлючФормы = ОбъектОбработки().Метаданные().ПолноеИмя() + ".Форма";
	Объект.ПутьКФормам = КлючФормы;
	
	//Первоначальное открытие формы без сохраненных настроек
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючФормы + ".Форма/ТекущиеДанные");
	Если Настройки = Неопределено Тогда
		Объект.ТипОбхода = "Авто";
		ПоказыватьСписокЗапросов = Истина;
		ПоказыватьПараметры = Истина;
		ПоказыватьЗапрос = Истина;
		РаскрашиватьТекстЗапроса = Истина;
		Элементы.КнопкаСохранитьЗапросыВФайл.Видимость = Ложь;
		
		УстановитьВидимости();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Объект.ИмяФайла) Тогда
		Команды.СохранитьЗапросыВФайл.Подсказка = "Сохранить запрос в файл ("+Объект.ИмяФайла+")";
	Иначе
		Элементы.КнопкаСохранитьЗапросыВФайл.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьВидимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда 
		Отказ = Истина;
		Если Объект.АвтосохранениеПриЗакрытии и ЗначениеЗаполнено(Объект.ИмяФайла) Тогда
			
			#Если ВебКлиент Тогда
				СохранитьФайлЗапросаВеб(,Истина);
			#Иначе
				СохранитьФайлЗапроса(,Истина);
			#КонецЕсли
			
		Иначе
			Текст = НСтр("ru = 'Данные изменены. Сохранить изменения?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		#Если ВебКлиент Тогда
			СохранитьФайлЗапросаВеб(Истина, Истина);
		#Иначе
			СохранитьФайлЗапроса(Истина, Истина);
		#КонецЕсли

	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура РезультатЗапросаВДерево(Команда)
	
	Объект.ТипОбхода = "Дерево";
	Элементы.ФормаГруппаТипОбхода.Заголовок = "В дерево";
	Элементы.ФормаРезультатЗапросаВДерево.Пометка = Истина;
	Элементы.ФормаРезультатЗапросаВСписок.Пометка = Ложь;
	Элементы.ФормаРезультатЗапросаАвто.Пометка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаВСписок(Команда)
	
	Объект.ТипОбхода = "Список";
	Элементы.ФормаГруппаТипОбхода.Заголовок = "В список";
	Элементы.ФормаРезультатЗапросаВДерево.Пометка = Ложь;
	Элементы.ФормаРезультатЗапросаВСписок.Пометка = Истина;
	Элементы.ФормаРезультатЗапросаАвто.Пометка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипПараметра()
	
	ТекущийПараметр = Элементы.Параметры.ТекущиеДанные;
	Если ТекущийПараметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещенияОЗакрытии = Новый ОписаниеОповещения("ТипВФормеЗавершениеВыбора", ЭтотОбъект);
	ОткрытьФорму(Объект.ПутьКФормам + "." + "ВыборТипа", Новый Структура("МетаданныеАдресХранилища", МетаданныеАдресХранилища) , ЭтотОбъект, , , , ОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипВФормеЗавершениеВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ТекущийПараметр = Элементы.Параметры.ТекущиеДанные;
		ТекущийТип = ВыбранныйЭлемент;
		
		Если ТекущийТип.Значение = "ТаблицаЗначений"
			Или ТекущийТип.Значение = "МоментВремени" 
			Или ТекущийТип.Значение = "Граница" Тогда 
			
			ТекущийПараметр.Тип 					= ТекущийТип.Значение;
			ТекущийПараметр.Значение 				= "";
			ТекущийПараметр.ПредставлениеТипа 		= ТекущийТип.Представление;
			ТекущийПараметр.ПредставлениеЗначения 	= ТекущийТип.Представление;
			
			//ВыбратьЗначениеПараметра(ТекущийПараметр);  //не работает в Такси
		Иначе
			Если ТекущийТип.Свойство("МетаданныеАдресХранилища") Тогда
				МетаданныеАдресХранилища = ТекущийТип.МетаданныеАдресХранилища;
			КонецЕсли;
			
			ИнициализацияТипаИЗначенияПараметра(ТекущийПараметр, ТекущийТип);
		КонецЕсли;
		
		ТекПоле = Элементы.Параметры.ТекущийЭлемент;
		Если ТекущийПараметр.Тип = "Число" ИЛИ ТекущийПараметр.Тип = "Дата" Тогда
			ТекПоле.ПодсказкаВвода = "";
		Иначе
			ТекПоле.ПодсказкаВвода = "<" + ТекущийПараметр.ПредставлениеТипа + ">";
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Не ЗначениеЗаполнено(ТекущийЗапрос_Идентификатор) Тогда
		ПоказатьСообщениеПользователю(НСтр("ru = 'Выберите запрос.'"), "Объект.Запросы");
		Возврат;
	КонецЕсли;
	
	Если Не Копирование Тогда 
		ЭлементПараметр 						= Объект.Параметры.Добавить();
		ЭлементПараметр.ИдентификаторЗапроса   	= ТекущийЗапрос_Идентификатор;
		ЭлементПараметр.Имя   					= ПолучитьИмяПараметра();
		ЭлементПараметр.Идентификатор   		= Новый УникальныйИдентификатор;
		
		Элементы.Параметры.ТекущаяСтрока 	= ЭлементПараметр.ПолучитьИдентификатор();
	
		ВыбратьТипПараметра();

	Иначе
		ЭлементКопирования = Элемент.ТекущиеДанные;
		
		ЭлементПараметр 						= Объект.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПараметр,ЭлементКопирования, "Имя, Тип, Значение, ПредставлениеТипа, ПредставлениеЗначения"); 
		ЭлементПараметр.Идентификатор 			= Новый УникальныйИдентификатор;
		ЭлементПараметр.ИдентификаторЗапроса 	= ТекущийЗапрос_Идентификатор;
		
	КонецЕсли;	
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ТекущийЗапрос_Текст = ПолучитьТекстЗапроса();
	
	ОбновитьТекстТекущегоЗапроса(ТекущийЗапрос_Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеВФормеПриИзменении(Элемент)
	ТекущийПараметр = Элементы.Параметры.ТекущиеДанные;
	Значение		= ТекущийПараметр.ПредставлениеЗначения;
	ТекущийТип		= ТекущийПараметр.Тип;
	Если ТекущийТип <> "ТаблицаЗначений" И ТекущийТип <> "МоментВремени" И ТекущийТип <> "Граница" Тогда 
		ТекущийПараметр.Значение	= ЗначениеВСтрокуСервер(Значение);
		Модифицированность 			= Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеВФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущийПараметр = Элементы.Параметры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущийПараметр.Тип) Тогда
		СтандартнаяОбработка = Ложь;
		ВыбратьТипПараметра();
	Иначе
		ВыбратьЗначениеПараметра(ТекущийПараметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначениеПараметра(ТекущийПараметр)
	
	ТипПараметра = ТекущийПараметр.ПредставлениеТипа;
	
	Если ТипПараметра = НСтр("ru = 'Таблица значений'") Тогда 
		Путь = Объект.ПутьКФормам + "." + "СложныйТип_ТаблицаЗначений";
	ИначеЕсли ТипПараметра = НСтр("ru = 'Момент времени'") Тогда 
		Путь = Объект.ПутьКФормам + "." + "СложныйТип_МоментВремени";
	ИначеЕсли ТипПараметра = НСтр("ru = 'Граница'") Тогда
		Путь = Объект.ПутьКФормам + "." + "СложныйТип_Граница";
	Иначе
		Возврат;
	КонецЕсли;
	
	ПередаваемыеПараметры = Новый Структура("Значение", ТекущийПараметр.Значение);
	ОповещенияОЗакрытии = Новый ОписаниеОповещения("СложныйТип_Выбран", ЭтотОбъект);
	ОткрытьФорму(Путь, ПередаваемыеПараметры, ЭтотОбъект, , , , ОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура СложныйТип_Выбран(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.Свойство("Значение") Тогда
		ТекущийПараметр = Элементы.Параметры.ТекущиеДанные;
		ТекущийПараметр.Значение = РезультатЗакрытия.Значение;		
		ТекущийПараметр.ПредставлениеЗначения = РезультатЗакрытия.Представление;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура Закомментировать(Команда)
	Перем ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка;
	
	Если РаскрашиватьТекстЗапроса Тогда
		Элементы.ТекстЗапроса_ФД.ПолучитьГраницыВыделения(ПерваяСтрока, ПоследняяСтрока);
		ПозицияКурсораНач = ТекстЗапроса_ФД.ПолучитьПозициюПоЗакладке(ПерваяСтрока);
		ПозицияКурсораКон = ТекстЗапроса_ФД.ПолучитьПозициюПоЗакладке(ПоследняяСтрока);
		
		ПерваяСтрока = 1;
		ПоследняяСтрока = 1;
		ТекстДоИзменения = ТекстЗапроса_ФД.ПолучитьТекст();
		Для К = 1 По СтрДлина(ТекстДоИзменения) Цикл
			Если К <= ПозицияКурсораНач Тогда
				Если Сред(ТекстДоИзменения, К, 1) = Символы.ПС Тогда
					ПерваяСтрока = ПерваяСтрока + 1;
					ПоследняяСтрока = ПоследняяСтрока + 1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если К > ПозицияКурсораКон Тогда
				Прервать;
			КонецЕсли;
			
			Если Сред(ТекстДоИзменения, К, 1) = Символы.ПС Тогда
				ПоследняяСтрока = ПоследняяСтрока + 1;
			КонецЕсли;
		КонецЦикла;
		
		ИтоговыйТекст = "";
		КоличествоСтрок = СтрЧислоСтрок(ТекстДоИзменения);
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Фрагмент = СтрПолучитьСтроку(ТекстДоИзменения, НомерСтроки);
			Если НомерСтроки >= ПерваяСтрока И НомерСтроки <= ПоследняяСтрока Тогда
				Если Лев(СокрЛ(Фрагмент), 2) = "//" Тогда
					Позиция = Найти(Фрагмент, "//");
					Фрагмент = Лев(Фрагмент, Позиция - 1) + Сред(Фрагмент, Позиция + 2);
				Иначе
					Фрагмент = "//" + Фрагмент;
				КонецЕсли;
			КонецЕсли;
			ИтоговыйТекст = ИтоговыйТекст + Фрагмент + ?(НомерСтроки < КоличествоСтрок, Символы.ПС, "");
		КонецЦикла;
		
		Модифицированность = Истина;
		ТекущийЗапрос_Текст = ИтоговыйТекст;
		
		ОбновитьТекстТекущегоЗапроса(ТекущийЗапрос_Текст);
		
	    Возврат;
	Иначе
		Элемент = Элементы.ТекстЗапроса_ТД;
		Элемент.ПолучитьГраницыВыделения(ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка);
		ТекстДоИзменения =  ТекстЗапроса_ТД.ПолучитьТекст();
	КонецЕсли; 
	
	КоличествоСтрок = СтрЧислоСтрок(ТекстДоИзменения);
	ВыделеныйФрагмент = "";
	ДлинаПоследнейСтроки = 0;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока - 1;
	КонецЕсли;
	Если ПерваяСтрока >= ПоследняяСтрока И ПоследняяКолонка = 1 Тогда 
		ПоследняяКолонка = СтрДлина(СтрПолучитьСтроку(ТекстДоИзменения, ПерваяСтрока));
		ПоследняяСтрока = ПерваяСтрока;
	КонецЕсли;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Фрагмент = СтрПолучитьСтроку(ТекстДоИзменения, НомерСтроки);
		Если НомерСтроки >= ПерваяСтрока И НомерСтроки <= ПоследняяСтрока Тогда
			Если Лев(СокрЛ(Фрагмент), 2) = "//" Тогда
				Позиция = Найти(Фрагмент, "//");
				Фрагмент = Лев(Фрагмент, Позиция - 1) + Сред(Фрагмент, Позиция + 2);
				
				Если НомерСтроки = ПерваяСтрока Тогда 
					ВыделеныйФрагмент = ВыделеныйФрагмент + Фрагмент;
				Иначе
					ВыделеныйФрагмент = ВыделеныйФрагмент + Символы.ПС + Фрагмент;
				КонецЕсли;
			Иначе
				Если НомерСтроки = ПерваяСтрока Тогда
					ВыделеныйФрагмент = ВыделеныйФрагмент + "//" + Фрагмент;
				Иначе
					ВыделеныйФрагмент = ВыделеныйФрагмент + Символы.ПС + "//" +Фрагмент;
				КонецЕсли;
			КонецЕсли;
			
			Если НомерСтроки = ПоследняяСтрока Тогда 
				ДлинаПоследнейСтроки = СтрДлина(Фрагмент) + 3;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока + 1;
		ДлинаПоследнейСтроки = 1;
		ВыделеныйФрагмент =  ВыделеныйФрагмент + Символы.ПС;
	КонецЕсли;
	
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	Элемент.ВыделенныйТекст = ВыделеныйФрагмент;
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗапросы(Команда)
	ПоказыватьСписокЗапросов = не ПоказыватьСписокЗапросов;
	Элементы.КнопкаПоказыватьЗапросы.Пометка = ПоказыватьСписокЗапросов;
	УстановитьВидимостьСписокЗапросовКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)

	Попытка
		Если ПустаяСтрока(ТекущийЗапрос_Текст) Тогда 
			КонструкторЗапроса = Новый КонструкторЗапроса();
		Иначе
			КонструкторЗапроса = Новый КонструкторЗапроса(ТекущийЗапрос_Текст);
		КонецЕсли;	
		
	Исключение
		Если РаскрашиватьТекстЗапроса Тогда
			Поле = "ТекстЗапроса_ФД";
		Иначе
			Поле = "ТекстЗапроса_ТД";
		КонецЕсли; 
		ПоказатьСообщениеПользователю(ОписаниеОшибки(), Поле);
		Возврат;
	КонецПопытки; 
	
	Если РаскрашиватьТекстЗапроса Тогда
		Элементы.ТекстЗапроса_ФД.Видимость = Ложь;
	КонецЕсли;
	
	КонструкторЗапроса.Показать(Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапроса", ЭтотОбъект));
	Если РаскрашиватьТекстЗапроса Тогда
		ПодключитьОбработчикОжидания("ТекстЗапроса_ФД_Видимость", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапроса_ФД_Видимость()
	Элементы.ТекстЗапроса_ФД.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапроса(ТЗ, ДополнительныеПараметры) Экспорт
	
	Если ТЗ = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ТЗ = ТекущийЗапрос_Текст Тогда
		Возврат; 
	КонецЕсли; 
	
	Модифицированность = Истина;
	ТекущийЗапрос_Текст = ТЗ;
	
	Если Объект.Запросы.Количество() = 0 Тогда
		НовСтрока = Объект.Запросы.Добавить();
		ТекущийЗапрос_Идентификатор = Новый УникальныйИдентификатор;
		НовСтрока.Идентификатор 	= ТекущийЗапрос_Идентификатор;
		НовСтрока.Имя	= ИмяЗапросаПоУмолчанию;
		УстановитьТекущиеПараметры();
	КонецЕсли;
	
	ОбновитьТекстТекущегоЗапроса(ТекущийЗапрос_Текст);

КонецПроцедуры

&НаКлиенте
Процедура ПереполучитьПараметры(Команда)
	ЗаполнитьПараметрыКлиент(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ПередаваемыеНастройки = Новый Структура;
	ПередаваемыеНастройки.Вставить("АвтосохранениеПриЗакрытии", Объект.АвтосохранениеПриЗакрытии);
	ПередаваемыеНастройки.Вставить("НеВыводитьВременныеТаблицы", Объект.НеВыводитьВременныеТаблицы);
	ПередаваемыеНастройки.Вставить("ДобавлятьКолонкуУИДДляСсылочныхТипов", Объект.ДобавлятьКолонкуУИДДляСсылочныхТипов);
	ПередаваемыеНастройки.Вставить("ВосстанавливатьРезультатЗапросаПриАктивизации", Объект.ВосстанавливатьРезультатЗапросаПриАктивизации);
	
	ОткрытьФорму(Объект.ПутьКФормам + "." + "Настройки", ПередаваемыеНастройки, ЭтотОбъект,,,, Новый ОписаниеОповещения("ОткрытьФормуНастроекЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; 
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросСВременнымиТаблицами(Команда)
	ВыполнитьЗапросКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросКлиент()
	
	ОчиститьСообщения();
	
	ВыделенныйТекст = ПолучитьВыделенныйТекст();
	
	Если Не ПустаяСтрока(ВыделенныйТекст) Тогда 
		Текст = ВыделенныйТекст;
	Иначе
		Текст = ТекущийЗапрос_Текст;
	КонецЕсли;	
	
	Если ПустаяСтрока(Текст) Тогда
		Если РаскрашиватьТекстЗапроса Тогда
			Поле = "ТекстЗапроса_ФД";
		Иначе
			Поле = "ТекстЗапроса_ТД";
		КонецЕсли; 
		ПоказатьСообщениеПользователю(НСтр("ru = 'Введите текст запроса.'"), Поле);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗапросСервер(Текст);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросСервер(ТекстЗапроса)
	
	ЕстьЗапрос = Ложь;
	Для каждого ТекущийЗапрос Из Объект.Запросы Цикл
		Если ТекущийЗапрос.Идентификатор = ТекущийЗапрос_Идентификатор Тогда
			ЕстьЗапрос = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ ЕстьЗапрос Тогда
		ПоказатьСообщениеПользователю(НСтр("ru = 'Выберите запрос.'"), "Объект.Запросы");
		Возврат; 
	КонецЕсли; 

	РезультатВыполненияЗапроса = ВыполнитьЗапрос(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(РезультатВыполненияЗапроса.ТекстСообщения) Тогда
		Если РаскрашиватьТекстЗапроса Тогда
			Поле = "ТекстЗапроса_ФД";
		Иначе
			Поле = "ТекстЗапроса_ТД";
		КонецЕсли; 

		ПоказатьСообщениеПользователю(РезультатВыполненияЗапроса.ТекстСообщения, Поле);
		Возврат; 
	КонецЕсли;
	
	УдалитьКнопкиРезультата();
	
	МассивРезультатовЗапросов = РезультатВыполненияЗапроса.МассивРезультатовЗапросов;
	МассивРезультатовЗапросовАдрес = ПоместитьВоВременноеХранилище(МассивРезультатовЗапросов, УникальныйИдентификатор);
	
	КоличествоТаблиц = МассивРезультатовЗапросов.ВГраница();
	Если КоличествоТаблиц >= 0 Тогда
		
		ПоследнийПодзапрос = МассивРезультатовЗапросов[КоличествоТаблиц];
		ДобавитьКнопкуРезультата(ПоследнийПодзапрос, КоличествоТаблиц, РезультатВыполненияЗапроса.ВремяВыполнения, Истина);
		
		Если НЕ Объект.НеВыводитьВременныеТаблицы Тогда
			Для К = 0 По КоличествоТаблиц - 1 Цикл
				ДобавитьКнопкуРезультата(МассивРезультатовЗапросов[К], К);
			КонецЦикла;
		КонецЕсли;
		
		ПоследнийРезультат = ПоследнийПодзапрос.РезультатЗапроса;
		
		ДобавитьКолонкиСпециальныхТипов(ПоследнийРезультат);
		
		ТекущийЗапрос_АдресРезультата = ПоместитьВоВременноеХранилище(ПоследнийРезультат, УникальныйИдентификатор);
		
		ОтобразитьРезультатЗапроса(ПоследнийРезультат);
		
	Иначе
		
		ТекущийЗапрос_АдресРезультата = Неопределено;
		Элементы.ДекорацияРезультат.Видимость = Истина;
		Элементы.РезультатЗапросаТаб.Видимость = Ложь;
		Элементы.РезультатЗапросаДер.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекущийЗапрос.АдресРезультатаЗапроса) Тогда
		УдалитьИзВременногоХранилища(ТекущийЗапрос.АдресРезультатаЗапроса);
	КонецЕсли;
	
	ИндексТекущегоЗапроса = Неопределено;
	Для каждого СтрЗапросы Из Объект.Запросы Цикл
		Если СтрЗапросы.Идентификатор = ТекущийЗапрос_Идентификатор Тогда
			ИндексТекущегоЗапроса = СтрЗапросы.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	ТекущийЗапрос = Объект.Запросы.Получить(ИндексТекущегоЗапроса - 1);
	
	ТекущийЗапрос.АдресРезультатаЗапроса = ТекущийЗапрос_АдресРезультата;
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьКолонкиСпециальныхТипов(ПоследнийРезультат)
	
	СписДобавляемыхКолонокТЗ = Новый Массив;
	СписДобавляемыхКолонокМомент = Новый Массив;
	ТекущийЗапрос_СписокКолонок.Очистить();
	Для Каждого Колонка Из ПоследнийРезультат.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			СписДобавляемыхКолонокТЗ.Добавить(Колонка.Имя);
		ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			СписДобавляемыхКолонокМомент.Добавить(Колонка.Имя);
		КонецЕсли;
		ТекущийЗапрос_СписокКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	Если СписДобавляемыхКолонокТЗ.Количество() > 0 ИЛИ СписДобавляемыхКолонокМомент.Количество() > 0 Тогда
		ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
		Если ТипЗнч(ПоследнийРезультат) = Тип("ДеревоЗначений") Тогда
			ЭтоДерево = Истина;
		Иначе
			ЭтоДерево = Ложь;
		КонецЕсли;
		
		Для Каждого Колонка Из СписДобавляемыхКолонокТЗ Цикл
			ПоследнийРезультат.Колонки.Добавить(Колонка+"_ТЗ", ОписаниеТиповСтрока, Колонка);
			Если ЭтоДерево Тогда
				ДеревоЗаполнитьЗначенияСтрок(ПоследнийРезультат.Строки, Колонка+"_ТЗ", "<Результат запроса>");
			Иначе
				ПоследнийРезультат.ЗаполнитьЗначения("<Результат запроса>", Колонка+"_ТЗ");
			КонецЕсли;
		КонецЦикла;
		Для Каждого Колонка Из СписДобавляемыхКолонокМомент Цикл
			ПоследнийРезультат.Колонки.Добавить(Колонка+"_Момент", ОписаниеТиповСтрока, Колонка);
			Если ЭтоДерево Тогда
				ДеревоЗаполнитьЗначенияСтрок(ПоследнийРезультат.Строки, Колонка+"_Момент", "<Момент времени>");
			Иначе
				ПоследнийРезультат.ЗаполнитьЗначения("<Момент времени>", Колонка+"_Момент");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапрос(ТекстЗапросаИсходный) Экспорт
	
	ПараметрыЗапроса = Объект.Параметры.НайтиСтроки(Новый Структура("ИдентификаторЗапроса",ТекущийЗапрос_Идентификатор));
	
	ВыводитьИдентификатор = Объект.ДобавлятьКолонкуУИДДляСсылочныхТипов;
	ПорядокОбхода = Объект.ТипОбхода;
	ВыводитьВременныеТаблицы = НЕ Объект.НеВыводитьВременныеТаблицы;
	
	// Убрать строки с комменатриями
	КоличествоСтрок = СтрЧислоСтрок(ТекстЗапросаИсходный);
	ТекстЗапроса = "";
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Фрагмент = СтрПолучитьСтроку(ТекстЗапросаИсходный, НомерСтроки);
		Если Лев(СокрЛ(Фрагмент), 2) <> "//" Тогда 
			ТекстЗапроса = ТекстЗапроса + Фрагмент + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	РезультатВыполненияЗапроса = Новый Структура;
	РезультатВыполненияЗапроса.Вставить("ТекстСообщения", "");
	
	МассивРезультатовЗапросов = Новый Массив;
	
	Если ПорядокОбхода = "Авто" Тогда
		Иерархия = Найти(ВРЕГ(ТекстЗапроса), "ИТОГИ") > 0;
	ИначеЕсли ПорядокОбхода = "Список" Тогда
		Иерархия = Ложь;
	Иначе
		Иерархия = Истина;
	КонецЕсли; 
	
	Попытка
		
		Если ВыводитьВременныеТаблицы И Найти(ТекстЗапроса, "ПОМЕСТИТЬ ") <> 0 Тогда
			МассивТекстов = ПостроитьМассивТекстовЗапросов(ТекстЗапроса);
			Если МассивТекстов.Количество() > 0 Тогда
				
				Запрос = Новый Запрос;
				ЗагрузитьПараметрыВЗапрос(Запрос, ПараметрыЗапроса);
				Если Запрос.МенеджерВременныхТаблиц <> Неопределено Тогда
					Запрос.МенеджерВременныхТаблиц.Закрыть();
				КонецЕсли; 
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				Для Каждого ТекЗапрос Из МассивТекстов Цикл
					Если Найти(ТекЗапрос, "УНИЧТОЖИТЬ ") > 0 Тогда
						Запрос.Текст = ТекЗапрос;
						Запрос.Выполнить();
						Продолжить;
					КонецЕсли; 
					
					ПозПоместиить = Найти(ТекЗапрос, "ПОМЕСТИТЬ ");
					Если ПозПоместиить > 0 Тогда				
						ИмяВременнойТаблицы = ПолучитьИмяВременнойТаблицы(ТекЗапрос, ПозПоместиить);
						Запрос.Текст = ТекЗапрос + ";ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы;
						
						ВыбполнитьПодзапрос(Запрос, "ВТ: " + ИмяВременнойТаблицы, Иерархия, МассивРезультатовЗапросов);
					Иначе
						Запрос.Текст = ТекЗапрос;
						ВыбполнитьПодзапрос(Запрос, "Результат", Иерархия, МассивРезультатовЗапросов);
					КонецЕсли; 
					
				КонецЦикла;
				
				Запрос.МенеджерВременныхТаблиц.Закрыть();
				
			КонецЕсли; 
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			ЗагрузитьПараметрыВЗапрос(Запрос, ПараметрыЗапроса);
			
			ВыбполнитьПодзапрос(Запрос, "Результат", Иерархия, МассивРезультатовЗапросов);
		КонецЕсли; 
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		РезультатВыполненияЗапроса.ТекстСообщения = ТекстСообщения;
	КонецПопытки;
	
	ВремяВыполнения = 0;
	Для Каждого стр Из МассивРезультатовЗапросов Цикл
		ВремяВыполнения = ВремяВыполнения + стр.ВремяВыполнения;
	КонецЦикла; 
	
	РезультатВыполненияЗапроса.Вставить("ВремяВыполнения", ВремяВыполнения);
	РезультатВыполненияЗапроса.Вставить("МассивРезультатовЗапросов", МассивРезультатовЗапросов);
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

&НаСервере
Процедура ВыбполнитьПодзапрос(Запрос, Имя, Иерархия, МассивРезультатовЗапросов)
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Иерархия Тогда
		_РезультатЗапросаТаб = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		КоличествоСтрок = _РезультатЗапросаТаб.Строки.Количество();
	Иначе
		_РезультатЗапросаТаб = РезультатЗапроса.Выгрузить();
		КоличествоСтрок = _РезультатЗапросаТаб.Количество();
		
		Если Объект.ДобавлятьКолонкуУИДДляСсылочныхТипов Тогда
			К = 1;
			ДобавляемыеКолонки = Новый Массив; 
			Для Каждого Колонка Из _РезультатЗапросаТаб.Колонки Цикл
				СписТипов = Колонка.ТипЗначения.Типы();
				Если СписТипов.Количество() > 0 И ЭтоСсылочныйТип(СписТипов[0]) Тогда
					ДобавляемыеКолонки.Добавить(Новый Структура("Имя, Позиция", Колонка.Имя, К));
				КонецЕсли;
				к = к + 1;
			КонецЦикла;
			
			Если ДобавляемыеКолонки.Количество() > 0 Тогда
				
				Смещение=0;
				Для Каждого Колонка Из ДобавляемыеКолонки Цикл
					_РезультатЗапросаТаб.Колонки.Вставить(Колонка.Позиция + Смещение, Колонка.Имя + "_УИД");
					Смещение = Смещение + 1;
				КонецЦикла;
				
				Для Каждого Строка Из _РезультатЗапросаТаб Цикл
					Для Каждого Колонка Из ДобавляемыеКолонки Цикл
						Строка[Колонка.Имя + "_УИД"] = Строка[Колонка.Имя].УникальныйИдентификатор();
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяВыполнения = (Конец - Начало) / 1000;
	МассивРезультатовЗапросов.Добавить(Новый Структура("ИмяЗапроса, КоличествоСтрок, ВремяВыполнения, РезультатЗапроса", Имя, КоличествоСтрок, ВремяВыполнения, _РезультатЗапросаТаб));
	
КонецПроцедуры 

&НаСервере
Функция ПостроитьМассивТекстовЗапросов(знач ТекстЗапроса)
	
	МассивТекстов = Новый Массив;
	Пока Не ПустаяСтрока(ТекстЗапроса) Цикл
		ТочкаСЗапятой = ";";
		ПозицияТочкиСЗапятой = Найти(ТекстЗапроса, ТочкаСЗапятой);
		Если Сред(ТекстЗапроса, ПозицияТочкиСЗапятой - 1, 1) = "\" Тогда
			ПозицияТочкиСЗапятой = 0;
		КонецЕсли;
		Если ПозицияТочкиСЗапятой = 0 Тогда
			ТекстОчередногоЗапроса 	= ТекстЗапроса;
			ПозицияТочкиСЗапятой	= СтрДлина(ТекстЗапроса);
		Иначе
			ТекстОчередногоЗапроса = Лев(ТекстЗапроса, ПозицияТочкиСЗапятой - 1);
		КонецЕсли;	
		Если Не ПустаяСтрока(ТекстОчередногоЗапроса) Тогда 
			МассивТекстов.Добавить(СокрЛП(ТекстОчередногоЗапроса));
		КонецЕсли;	
		ТекстЗапроса = Сред(ТекстЗапроса, ПозицияТочкиСЗапятой + 1);
	КонецЦикла;
	
	Возврат МассивТекстов;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПараметрыВЗапрос(Запрос, ПараметрыЗапроса)
	Для каждого ЭлементПараметр Из ПараметрыЗапроса Цикл 
		СтрокаЗначение = ЭлементПараметр.Значение;
		Если ПустаяСтрока(СтрокаЗначение) Тогда 
			Значение = Неопределено;
		Иначе	
			Значение = ЗначениеИзСтрокиВнутр(СтрокаЗначение);
		КонецЕсли;
		Запрос.УстановитьПараметр(ЭлементПараметр.Имя, Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяВременнойТаблицы(ТекстЗапроса, Позиция)
	ИмяТаблицы		= "";
	ДлиннаТекста 	= СтрДлина(ТекстЗапроса);
	
	Для Индекс = Позиция + 10 По ДлиннаТекста Цикл
		Символ = Сред(ТекстЗапроса, Индекс, 1);
		Если ПустаяСтрока(Символ) Тогда
			Прервать;
		Иначе
			ИмяТаблицы = ИмяТаблицы + Символ;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ИмяТаблицы;
КонецФункции

&НаСервере
Процедура ДобавитьКнопкуРезультата(Результат, К, ВремяВыполнения = Неопределено, ПоУмолчанию = Ложь)
	
	Если ВремяВыполнения = Неопределено Тогда
		ВремяВыполнения = Результат.ВремяВыполнения;
	КонецЕсли; 
	
	НоваяКоманда = Команды.Добавить("КомандаРезультат_" + К);
	НоваяКоманда.Действие = "КнопкаРезультат";
	НоваяКоманда.Заголовок = Результат.ИмяЗапроса + " ("+ Результат.КоличествоСтрок + "; " + ВремяВыполнения + ")";
	НоваяКоманда.Подсказка = "Количество строк: " + Результат.КоличествоСтрок + ". Время выполнения: " + ВремяВыполнения + " сек.";
	
	Элемент_Кнопка = Элементы.Добавить("КнопкаРезультат" + к, Тип("КнопкаФормы"), Элементы.ГруппаПодзапросы);
	Элемент_Кнопка.ИмяКоманды = "КомандаРезультат_" + К;
	
	Элемент_Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	//Элемент_Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;

КонецПроцедуры 

&НаСервере 
Процедура ДеревоЗаполнитьЗначенияСтрок(Строки, Колонка, ЗначениеКолонки)
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.Строки.Количество() > 0 Тогда
			ДеревоЗаполнитьЗначенияСтрок(Строка.Строки, Колонка, ЗначениеКолонки);
		Иначе
			Строка[Колонка] = ЗначениеКолонки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#Область Работа_С_Файлами

&НаКлиенте
Процедура СохранитьЗапросыВФайл(Команда)
	
	#Если ВебКлиент Тогда
		СохранитьФайлЗапросаВеб();
	#Иначе
		СохранитьФайлЗапроса();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросыКак(Команда)
	
	#Если ВебКлиент Тогда
		СохранитьФайлЗапросаВеб(Истина);
	#Иначе
		СохранитьФайлЗапроса(Истина);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗапроса(ЗапрашиватьПуть = Ложь, ЗакрыватьФорму = Ложь)
	
	ПолучаемыеФайлы 	= Новый Массив; 
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(, СохранитьЗапросыСервер()));
	ОписаниеОповещенияПолученияФайлов = Новый ОписаниеОповещения("СохранениеФайловЗавершение", ЭтотОбъект, ЗакрыватьФорму);
	
	Если ЗапрашиватьПуть = Истина Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок					= НСтр("ru = 'Выберите файл запросов'");
		Диалог.ПредварительныйПросмотр  	= Ложь;
		Диалог.Фильтр   					= НСтр("ru = 'Файл запросов (*.q1c)|*.q1c'");
		Диалог.Расширение   				= "q1c";
		Диалог.ПроверятьСуществованиеФайла  = Истина;
		Диалог.МножественныйВыбор			= Ложь;
		
		НачатьПолучениеФайлов(ОписаниеОповещенияПолученияФайлов, ПолучаемыеФайлы, Диалог, Истина);
	Иначе
		НачатьПолучениеФайлов(ОписаниеОповещенияПолученияФайлов, ПолучаемыеФайлы, Объект.ИмяФайла, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗапросаВеб(ЗапрашиватьПуть = Ложь, ЗакрыватьФорму = Ложь)

	ПроцедураПродолжения = Новый ОписаниеОповещения("СохранитьФайлЗапросаВеб_Завершение", ЭтотОбъект, ЗапрашиватьПуть);
	
	Оповещение = Новый ОписаниеОповещения("РасширениеУстановлено_Завершение", ЭтотОбъект, ПроцедураПродолжения);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайлами_Завершение(ДополнительныеПараметры) Экспорт

	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайлами_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);

КонецПроцедуры 

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайлами_Завершение(Подключено, ДополнительныеПараметры) Экспорт

	Если Подключено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СохранитьФайлЗапросаВеб_Завершение(Результат, ЗапрашиватьПуть) Экспорт

	СохранитьФайлЗапроса(ЗапрашиватьПуть);

КонецПроцедуры 

&НаСервере
Функция СохранитьЗапросыСервер()

	Попытка
		ДвоичныеДанные = ОбъектОбработки().ЗаписатьЗапросыВФайлXML(Объект);
		Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Исключение
		ПоказатьСообщениеПользователю(ОписаниеОшибки());
	КонецПопытки; 
	
КонецФункции

&НаКлиенте
Процедура СохранениеФайловЗавершение(ПолученныеФайлы, ЗакрыватьФорму) Экспорт

	Если ПолученныеФайлы <> Неопределено И ПолученныеФайлы.Количество() > 0 Тогда
		Элементы.КнопкаСохранитьЗапросыВФайл.Видимость = Истина;
		Объект.ИмяФайла = ПолученныеФайлы[0].Имя;
		Модифицированность = Ложь;
	КонецЕсли;
	
	Если ЗакрыватьФорму = Истина Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры 

//ОТКРЫТИЕ
&НаКлиенте
Процедура ВыбратьЗапросыИзФайла(Команда)
	
	#Если ВебКлиент Тогда
		ОткрытьФайлЗапросаВеб();
	#Иначе
		ОткрытьФайлЗапроса(Неопределено, Неопределено);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЗапросаВеб()

	ПроцедураПродолженияЗаписиЗапроса = Новый ОписаниеОповещения("ОткрытьФайлЗапроса", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("РасширениеУстановлено_Завершение", ЭтотОбъект, ПроцедураПродолженияЗаписиЗапроса);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура РасширениеУстановлено_Завершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры);
	Иначе
		ПроцедураПродолженияУстановкиРасширения = Новый ОписаниеОповещения("УстановкаРасширенияРаботыСФайлами_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(ПроцедураПродолженияУстановкиРасширения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЗапроса(Результат, ДополнительныеПараметры) Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок					= НСтр("ru = 'Выберите файл запросов'");
	Диалог.ПредварительныйПросмотр  	= Ложь;
	Диалог.Фильтр   					= НСтр("ru = 'Файл запросов (*.q1c)|*.q1c'");
	Диалог.Расширение   				= "q1c";
	Диалог.ПроверятьСуществованиеФайла  = Истина;
	Диалог.МножественныйВыбор			= Ложь;

	Оповещение = Новый ОписаниеОповещения("ПомещениеФайловЗавершение", ЭтотОбъект);
	НачатьПомещениеФайлов(Оповещение,,Диалог,Истина, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлЗапросов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив; 
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Объект.ИмяФайла));
	Оповещение = Новый ОписаниеОповещения("ПомещениеФайловЗавершение", ЭтотОбъект);
	НачатьПомещениеФайлов(Оповещение,ПомещаемыеФайлы,,Ложь, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайловЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено ИЛИ ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИмяФайла = ПомещенныеФайлы[0].Имя;
	ИмяЗапроса = ПрочитатьФайлЗапросов_Сервер(ПомещенныеФайлы[0].Хранение);
	
	ОбновитьФормуКлиент(ИмяЗапроса);

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлЗапросовВеб()
	ПроцедураПродолженияЧтенияФайлаЗапросов = Новый ОписаниеОповещения("ПрочитатьФайлЗапросов", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("РасширениеУстановлено_Завершение", ЭтотОбъект, ПроцедураПродолженияЧтенияФайлаЗапросов);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
КонецПроцедуры


&НаСервере
Функция ПрочитатьФайлЗапросов_Сервер(ПомещенныеФайлыХранилище)
	
	Объект.Запросы.Очистить();
	Объект.Параметры.Очистить();
	ТекущийЗапрос_АдресРезультата = Неопределено;
	
	Попытка
		ФайлДвоичныеДанные = ПолучитьИзВременногоХранилища(ПомещенныеФайлыХранилище);
		
		ОбъектВнешнейОбработки = ОбъектОбработки().ПрочитатьЗапросыИзФайлаXML(ФайлДвоичныеДанные);
		ЗаполнитьЗапросыИПараметрыИзОбъектаВнешнейОбработки(ОбъектВнешнейОбработки);
	Исключение
		ПоказатьСообщениеПользователю(ОписаниеОшибки());
	КонецПопытки; 
	
	КоличествоЗапросов = Объект.Запросы.Количество();
	Если КоличествоЗапросов > 0 Тогда 
		СтрокаЗапроса					= Объект.Запросы.Получить(0);
		ТекущийЗапрос_Идентификатор 	= СтрокаЗапроса.Идентификатор;
		ТекущийЗапрос_Текст				= СтрокаЗапроса.Текст;
	Иначе
		ТекущийЗапрос_Идентификатор		= Новый УникальныйИдентификатор;
		ТекущийЗапрос_Текст				= "";
		СтрокаЗапроса 					= Объект.Запросы.Добавить();
		СтрокаЗапроса.Идентификатор  	= ТекущийЗапрос_Идентификатор;
		СтрокаЗапроса.Имя				= ИмяЗапросаПоУмолчанию;
	КонецЕсли;
	
	Возврат СтрокаЗапроса.Имя;
	
КонецФункции
#КонецОбласти

&НаКлиенте
Процедура СоздатьТекстЗапросаДляКонфигуратора(Команда)
	
	ПараметрыЗапроса = Объект.Параметры.НайтиСтроки(Новый Структура("ИдентификаторЗапроса",ТекущийЗапрос_Идентификатор));
	МассивПараметров = Новый СписокЗначений; 
	                 
	Для Каждого стрПараметр Из ПараметрыЗапроса Цикл
		
		Если стрПараметр.Тип = "Булево" Тогда
			ЗначениеПараметра = Формат(стрПараметр.ПредставлениеЗначения, "БЛ=Ложь; БИ=Истина");
		ИначеЕсли стрПараметр.Тип = "Дата" Тогда
			ЗначениеПараметра = "Дата(" + Формат(стрПараметр.ПредставлениеЗначения, "ДФ=yyyy,M,d,h,m,s") + ")";
		ИначеЕсли стрПараметр.Тип = "Строка" Тогда
			ЗначениеПараметра = """" + стрПараметр.ПредставлениеЗначения + """";
		ИначеЕсли стрПараметр.Тип = "Число" Тогда
			ЗначениеПараметра = "" + Формат(стрПараметр.ПредставлениеЗначения, "ЧРД=.; ЧГ=");
		ИначеЕсли НРег(Лев(стрПараметр.Тип,4)) = "enum" ИЛИ НРег(Лев(стрПараметр.Тип,19)) = "ПеречислениеСсылка." Тогда
			ЗначениеПараметра = ПолучитьПредставлениеПредопределенного("Перечисления", стрПараметр.Значение);
		Иначе
			ЗначениеПараметра = "ЗначениеИзСтрокиВнутр(""" + СтрЗаменить(СтрЗаменить(стрПараметр.Значение, """", """"""),Символы.ПС,"") + """)";
		КонецЕсли;
		
		МассивПараметров.Добавить(Новый Структура("Имя, Значение", стрПараметр.Имя, ЗначениеПараметра));

	КонецЦикла; 

	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("ТекстЗапроса", ПолучитьТекстЗапроса());
	ПараметрыПередачи.Вставить("Параметры", МассивПараметров);
	
	Путь = Объект.ПутьКФормам + "." + "ТекстЗапросаДляКонфигуратора";
	ОткрытьФорму(Путь, ПараметрыПередачи, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПредопределенного(ИмяМетаданных, ЗначениеСтр)
	
	Значение = ЗначениеИзСтрокиВнутр(ЗначениеСтр);
	ИмяПеречисления = Значение.Метаданные().Имя;
	Индекс = Перечисления[ИмяПеречисления].Индекс(Значение);
	
	Возврат ИмяМетаданных + "." + ИмяПеречисления + "." + Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;

КонецФункции 
///////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Процедура УстановитьТекущиеПараметры()

	Фильтр 				= Новый Структура;
	Фильтр.Вставить("ИдентификаторЗапроса", ТекущийЗапрос_Идентификатор);
	ФиксированныйФильтр = Новый ФиксированнаяСтруктура(Фильтр);
	Элементы.Параметры.ОтборСтрок = ФиксированныйФильтр;

КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьОтображение()

	#Если ВебКлиент Тогда
		ЭтотОбъект.ОбновитьОтображениеДанных();	
	#КонецЕсли

КонецПроцедуры 

&НаКлиенте
Процедура УстановитьЗаголовокКнопкиЗапросы()

	КоличествоЗапросов = Объект.Запросы.Количество();
	ЗаголовокКнопкиВыбораЗапроса = НСтр("ru = 'Запросы'");
	Если КоличествоЗапросов > 1 Тогда 
		ЗаголовокКнопкиВыбораЗапроса = ЗаголовокКнопкиВыбораЗапроса + " (" + КоличествоЗапросов + ")";
	КонецЕсли;	
	Элементы.КнопкаПоказыватьЗапросы.Заголовок = ЗаголовокКнопкиВыбораЗапроса;

КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьФормуКлиент(ИмяЗапроса, ОбновлятьЗаголовокКнопки = Истина) 
	
	УстановитьТекущиеПараметры();
	УстановитьЗаголовокФормы(ИмяЗапроса);
	
	Если ОбновлятьЗаголовокКнопки Тогда
		УстановитьЗаголовокКнопкиЗапросы();
	КонецЕсли; 
	
	РаскраситьТекстЗапроса(ТекущийЗапрос_Текст);
	
	ОбновитьОтображение();	
	
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьИмяЗапроса(знач ТекстЗапроса)
	// Если пустой текст запроса тогда возвращается "Запрос".
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ВозврЗнач = ИмяЗапросаПоУмолчанию;
		Возврат ВозврЗнач;
	КонецЕсли;
	
	// Поиск зарезервированного слова "ВЫБРАТЬ".
	Выбрать		= "ВЫБРАТЬ";
	ДлинаВыбрать	= СтрДлина(Выбрать);
	ПозицияВыбрать	= Найти(ВРег(ТекстЗапроса), Выбрать);
	Если ПозицияВыбрать = 0 Тогда
		ВозврЗнач = ИмяЗапросаПоУмолчанию;
		Возврат ВозврЗнач;
	КонецЕсли;	
	
	// Срез строки текста запроса без зарезервированного слова "ВЫБРАТЬ".
	ДлинаЗапроса    = СтрДлина(ТекстЗапроса);
	ТекстЗапроса 	= Сред(ТекстЗапроса, ПозицияВыбрать + ДлинаВыбрать);
	
	// Поиск первой "точки", чтобы определить имя таблицы.                                                  
	Точка			= ".";
	ДлинаТочка		= СтрДлина(Точка);
	ПозицияТочка 	= Найти(ВРег(ТекстЗапроса), Точка);
	Если ПозицияТочка = 0 Тогда
		ВозврЗнач = ИмяЗапросаПоУмолчанию;
		Возврат ВозврЗнач;
	КонецЕсли;
	
	// Возвращается "Запрос:" и имя первой таблицы.
	ВозврЗнач = СокрЛП(Лев(ТекстЗапроса, ПозицияТочка - ДлинаТочка));
	Если ПустаяСтрока(ВозврЗнач) Тогда 
		ВозврЗнач = ИмяЗапросаПоУмолчанию;
	КонецЕсли;	
	
	Возврат ВозврЗнач;
КонецФункции	

// Добавляет новый параметр в структуру параметров.
//
// Параметры:
//	ТекущийПрочитанныйПараметр - текущий параметр, прочитанный из текста запроса.
//  ИдентификаторЗапроса - GUID запроса.
//
// Возвращает: структуру параметров.
//
Функция ДобавлениеНовогоПараметра(ТекущийПрочитанныйПараметр)
	
	ЭлементПараметр = Новый Структура("Имя, Значение", ТекущийПрочитанныйПараметр.Имя);
	
	ДоступныеТипы = ТекущийПрочитанныйПараметр.ТипЗначения.Типы();
	Если ДоступныеТипы.Количество()=0 Тогда
		ЭлементПараметр.Значение = "";
	Иначе
		ЭлементПараметр.Значение = ТекущийПрочитанныйПараметр.ТипЗначения.ПривестиЗначение();
	КонецЕсли;
	
	Возврат ЭлементПараметр;
КонецФункции

// Считывает параметры из текста запроса.
//
// Параметры:
//	ТекстЗапроса_ТД - текст запроса.
//	Удалять - флаг очистки списка параметров для текущего запроса.
//  ИдентификаторЗапроса - Идентификатор текущего запроса.
//
&НаСервере
Процедура СчитатьПараметрыЗапроса(ТекстЗапроса, Удалять = Ложь)
	ПараметрыВЗапросе = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	ПарЗап = Запрос.НайтиПараметры();
	Для каждого СтрПараметры Из ПарЗап Цикл 
		ПараметрыВЗапросе.Добавить(ДобавлениеНовогоПараметра(СтрПараметры));
	КонецЦикла;
	
	ПараметрыВФорме = Объект.Параметры;
	
	// Добавление параметров.
	МассивПараметровФормы = ПараметрыВФорме.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ТекущийЗапрос_Идентификатор));
	
	Если Удалять Тогда
		Для Каждого стрПараметрФормы Из МассивПараметровФормы Цикл
			ПараметрыВФорме.Удалить(стрПараметрФормы);
		КонецЦикла;
		
		Для Каждого СтрПараметрЗапроса Из ПараметрыВЗапросе Цикл
			ДобавитьПараметрВФорму(ПараметрыВФорме, СтрПараметрЗапроса);
		КонецЦикла; 
		
		Модифицированность = Истина;
	Иначе
		Для каждого СтрПараметрЗапроса Из ПараметрыВЗапросе Цикл
			ЕстьПараметр = Ложь;
			ПроверяемыйПараметрЗапроса = НРег(СтрПараметрЗапроса.Имя);
			Для каждого СтрПараметрФормы Из МассивПараметровФормы Цикл
				Если ПроверяемыйПараметрЗапроса = НРег(СтрПараметрФормы.Имя) Тогда
					ЕстьПараметр = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЕстьПараметр Тогда 
				ДобавитьПараметрВФорму(ПараметрыВФорме, СтрПараметрЗапроса);
				Модифицированность = Истина;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрВФорму(ПараметрыВФорме, ПараметрСтруктуры)
	Значение 						= ПараметрСтруктуры.Значение;
	Элемент							= ПараметрыВФорме.Добавить();
	Элемент.Идентификатор			= Новый УникальныйИдентификатор;
	Элемент.ИдентификаторЗапроса 	= ТекущийЗапрос_Идентификатор;
	Элемент.Имя						= ПараметрСтруктуры.Имя;
	Элемент.Тип						= ИзТипаВСтроку(Значение);
	Элемент.Значение				= ЗначениеВСтрокуВнутр(Значение);
	Элемент.ПредставлениеТипа 		= Строка(ТипЗнч(Значение));
	Элемент.ПредставлениеЗначения 	= Значение;
КонецПроцедуры

Функция ИзТипаВСтроку(Значение) Экспорт
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ИмяТипа = "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		ИмяТипа = "Число";
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		ИмяТипа = "Булево";
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		ИмяТипа = "Дата";
	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда
		ИмяТипа = "МоментВремени";
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда
		ИмяТипа = "";
	Иначе	
		ИмяТипа = xmlТип(ТипЗнч(Значение)).ИмяТипа;
	КонецЕсли;
	
	Возврат ИмяТипа;
КонецФункции

&НаКлиенте
Функция УдалитьНезначащиеСимволы(ТЗ)
	
	МассивСтрок = ИзСтрокиСРазделителями(ТЗ, Символы.ПС);
	
	ЕстьИзм = Ложь;
	ТЗ = "";
	Для Каждого Стр Из МассивСтрок Цикл
	
		Поз = Найти(Стр, "|");
		Если Поз > 0 Тогда
			ЕстьИзм = Истина;
			Стр =  Сред(Стр, Поз + 1);
		КонецЕсли;
		
		Поз = Найти(НРег(Стр), """выбрать");
		Если Поз > 0 Тогда
			ЕстьИзм = Истина;
			Стр =  Сред(Стр, Поз + 1);
		КонецЕсли;
		
		Если Прав(Стр, 2) = """;" Тогда
			ЕстьИзм = Истина;
			Стр =  Лев(Стр, СтрДлина(Стр) - 2);
		ИначеЕсли Прав(Стр, 1) = """" Тогда
			ЕстьИзм = Истина;
			Стр =  Лев(Стр, СтрДлина(Стр) - 1);
		КонецЕсли;
		
		Если прав(Стр,3)=" """"" или прав(Стр,4)=" """"," или прав(Стр,4)=" """")" Тогда
		Иначе
			ЕстьИзм = Истина;
			Стр =  СтрЗаменить(Стр, """""","""");
		КонецЕсли; 
		
		ТЗ = ТЗ + Стр + Символы.ПС;
		
	КонецЦикла;
	
	Возврат ЕстьИзм;
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыФормы_КолонкиТаблицы(ЭлементТаблица) Экспорт 

	СписокСущКолонок = ЭлементТаблица.ПодчиненныеЭлементы;
	СписокИменКолонок = Новый СписокЗначений;
	Для Каждого Колонка Из СписокСущКолонок Цикл
		СписокИменКолонок.Добавить(Колонка.Имя);
	КонецЦикла; 
	
	Для Каждого Колонка Из СписокИменКолонок Цикл
		Элементы.Удалить(Элементы.Найти(Колонка.Значение));
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УдалитьДобавитьКолонки_ТаблицаЗначений(СоздаваемаяТаблицаЗначений, ИмяРеквизитаФормы, ИмяЭлементаФормы) Экспорт

	ЭлементТаблица = Элементы[ИмяЭлементаФормы];
	УдалитьЭлементыФормы_КолонкиТаблицы(ЭлементТаблица);
	          
	МассивНовыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из СоздаваемаяТаблицаЗначений.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			Продолжить;
		КонецЕсли;
		НовыйТип = Новый ОписаниеТипов(Колонка.ТипЗначения,,"Null");
		МассивНовыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, НовыйТип, ИмяРеквизитаФормы, Колонка.Заголовок));
	КонецЦикла;
	
	МассивСуществующихРеквизитов = ПолучитьРеквизиты(ИмяРеквизитаФормы);
	Для Каждого УдаляемыйРеквизит Из МассивСуществующихРеквизитов Цикл
		МассивУдаляемыхРеквизитов.Добавить(УдаляемыйРеквизит.Путь+"."+УдаляемыйРеквизит.Имя);
	КонецЦикла; 
	
	ИзменитьРеквизиты(МассивНовыхРеквизитов, МассивУдаляемыхРеквизитов);
	ЗначениеВДанныеФормы(СоздаваемаяТаблицаЗначений, ЭтаФорма[ИмяРеквизитаФормы]);
	
	Для Каждого Колонка Из СоздаваемаяТаблицаЗначений.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		
		ЭлементКолонка = Элементы.Добавить(ИмяЭлементаФормы + "_" + КолонкаИмя, Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
		Если НЕ Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) И НЕ Колонка.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			ЭлементКолонка.ПутьКДанным = ИмяРеквизитаФормы + "." + КолонкаИмя;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатЗапроса(РезультатЗапроса)

	Если РезультатЗапроса = Неопределено Тогда
		Возврат; 
	КонецЕсли; 
	
	Элементы.ДекорацияРезультат.Видимость = Ложь;
	
	Если ТипЗнч(РезультатЗапроса) = Тип("ТаблицаЗначений") Тогда
		РезультатЗапросаДер.ПолучитьЭлементы().Очистить();
		УдалитьДобавитьКолонки_ТаблицаЗначений(РезультатЗапроса, "РезультатЗапросаТаб", "РезультатЗапросаТаб");
		Элементы.РезультатЗапросаТаб.Видимость = Истина;
		Элементы.РезультатЗапросаДер.Видимость = Ложь;
	Иначе
		РезультатЗапросаТаб.Очистить();
		УдалитьДобавитьКолонки_ТаблицаЗначений(РезультатЗапроса, "РезультатЗапросаДер", "РезультатЗапросаДер");
		Элементы.РезультатЗапросаДер.Видимость = Истина;
		Элементы.РезультатЗапросаТаб.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ЭтоСсылочныйТип(Тип) Экспорт
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

&НаСервере
Процедура УдалитьКнопкиРезультата()
	
	КоличествоВкладок = Элементы.ГруппаПодзапросы.ПодчиненныеЭлементы.Количество();
	Для К = 0 По КоличествоВкладок - 1 Цикл 
		Элементы.Удалить(Элементы.Найти("КнопкаРезультат" + к));
		Команды.Удалить(Команды.Найти("КомандаРезультат_" + к));
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуСервер(Значение)
	ВозврЗнач = ЗначениеВСтрокуВнутр(Значение);
	Возврат ВозврЗнач;
КонецФункции	


Функция ФормированиеПредставленияЗначения(Значение) Экспорт
	Результат = "";
	
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда 
		ИтоговаяСтрока = "Таблица: строк = %КоличествоСтрок%, колонок = %КоличествоКолонок%";
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоСтрок%", Строка(Значение.Количество()));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоКолонок%", Строка(Значение.Колонки.Количество()));
		Результат = ИтоговаяСтрока;
	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда 
		Результат = Строка(Значение.Дата) + "; " + Строка(Значение.Ссылка);
	ИначеЕсли ТипЗнч(Значение) = Тип("Граница") Тогда 
		Результат = Строка(Значение.Значение) + "; " + Строка(Значение.ВидГраницы);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Заполняет из объекта внешней обработки запросы и параметры.
//
// Параметры:
//	ОбъектОбработки - объект обработки.
//
&НаСервере
Процедура ЗаполнитьЗапросыИПараметрыИзОбъектаВнешнейОбработки(ОбъектОбработки)
	ЗапросыОб 	= ОбъектОбработки.Запросы;
	ПараметрыОб	= ОбъектОбработки.Параметры;
	
	Объект.Запросы.Очистить();
	Объект.Параметры.Очистить();
	
	// Заполнение запросов и параметров в форме.
	Для каждого ТекЗапрос Из ЗапросыОб Цикл
		ЭлементЗапроса 						= Объект.Запросы.Добавить();
		ЭлементЗапроса.Идентификатор		= ТекЗапрос.Идентификатор;
		ЭлементЗапроса.Имя					= ТекЗапрос.Имя;
		ЭлементЗапроса.Текст 				= ТекЗапрос.Текст;
	КонецЦикла;	
	
	Для каждого ТекПараметр Из ПараметрыОб Цикл
		ТипСтрока 	= ТекПараметр.Тип;
		
		Значение	= ТекПараметр.Значение;
		Если ЗначениеЗаполнено(Значение)  Тогда
			ЗначениеПар    = ЗначениеИЗСтрокиВнутр(Значение);
		КонецЕсли;
		
		Если ТипСтрока = "ТаблицаЗначений" Или ТипСтрока = "МоментВремени" Или ТипСтрока = "Граница" Тогда
			ЭлементПараметр								= Объект.Параметры.Добавить();
			ЭлементПараметр.ИдентификаторЗапроса		= ТекПараметр.ИдентификаторЗапроса;
			ЭлементПараметр.Идентификатор				= ТекПараметр.Идентификатор;
			ЭлементПараметр.Имя							= ТекПараметр.Имя;
			ЭлементПараметр.Тип		 					= ТипСтрока;
			Если ТипСтрока = "ТаблицаЗначений" Тогда
				ЭлементПараметр.ПредставлениеТипа		= "Таблица значений";
			ИначеЕсли ТипСтрока = "МоментВремени" Тогда
				ЭлементПараметр.ПредставлениеТипа		= "Момент времени";
			Иначе
				ЭлементПараметр.ПредставлениеТипа		= ТипСтрока;
			КонецЕсли;
			ЭлементПараметр.Значение 					= ТекПараметр.Значение;
			ЭлементПараметр.ПредставлениеЗначения		= ФормированиеПредставленияЗначения(ЗначениеПар);

		Иначе
			ЭлементПараметр								= Объект.Параметры.Добавить();
			ЭлементПараметр.ИдентификаторЗапроса		= ТекПараметр.ИдентификаторЗапроса;
			ЭлементПараметр.Идентификатор				= ТекПараметр.Идентификатор;
			ЭлементПараметр.Имя							= ТекПараметр.Имя;
			ЭлементПараметр.Тип 						= ТипСтрока;
			ЭлементПараметр.Значение					= ЗначениеВСтрокуВнутр(ЗначениеПар);
			ЭлементПараметр.ПредставлениеЗначения		= ЗначениеПар;
			ЭлементПараметр.ПредставлениеТипа			= Строка(ТипЗнч(ЗначениеПар));
			
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияТипаИЗначенияПараметра(ТекущийПараметр, ТекущийТип)
	
	ТекущийПараметр.Тип 					= ТекущийТип.Значение;
	ТекущийПараметр.ПредставлениеТипа 		= ТекущийТип.Представление;
	Описание 								= Новый ОписаниеТипов(ТекущийТип.Значение);
	Значение								= Описание.ПривестиЗначение();
	ТекущийПараметр.ПредставлениеЗначения	= Значение;   
	ТекущийПараметр.Значение				= ЗначениеВСтрокуСервер(Значение);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяПараметра()
	ПараметрыВФорме = Объект.Параметры;
	Флаг = Истина;
	Индекс = 0;
	
	Пока Флаг Цикл
		Имя = "Параметр" + Строка(Формат(Индекс, "ЧН=-"));
		Имя = СтрЗаменить(Имя, "-", "");
		Фильтр = Новый Структура("Имя", Имя);
		
		ОтфильтрованныеСтроки = ПараметрыВФорме.НайтиСтроки(Фильтр);
		Если ОтфильтрованныеСтроки.Количество() = 0 Тогда
			ВозврЗнач 	= Имя;
			Флаг 		= Ложь;
		КонецЕсли;	
		Индекс = Индекс+1;
	КонецЦикла; 
	
	Возврат ВозврЗнач;
КонецФункции	

// Показывает сообщение или предупреждение пользователю
//
// Параметры:
//	ТекстСообщения - текст передаваемого сообщения.
//	ПутьКДанным - путь к данным для сообщения.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеПользователю(ТекстСообщения, Поле = "")
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Поле = Поле;     //"Объект.Запросы[0].Имя"
	Сообщение.Сообщить();
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьПараметрыКлиент(Удалять = Истина)

	Если ЗначениеЗаполнено(ТекущийЗапрос_Текст) Тогда
		
		СчитатьПараметрыЗапроса(ТекущийЗапрос_Текст, Удалять);
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует параметры из запроса имеющего идентификатор текущего запроса.
//
// Параметры:
//	ЗапросПолучатель - запрос, к которому привязываются параметры.
//
&НаКлиенте
Процедура СкопироватьПараметрыИзЗапроса(СтарыйЗапрос_Идентификатор)
	
	ПараметрыЗапроса = Объект.Параметры.НайтиСтроки(Новый Структура("ИдентификаторЗапроса",СтарыйЗапрос_Идентификатор));
	Для Каждого стрПараметр Из ПараметрыЗапроса Цикл
		ЭлементПараметр = Объект.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПараметр,стрПараметр); 
		ЭлементПараметр.Идентификатор 			= Новый УникальныйИдентификатор;
		ЭлементПараметр.ИдентификаторЗапроса 	= ТекущийЗапрос_Идентификатор;
	КонецЦикла;

КонецПроцедуры	

// Формирует имя копии запроса.
//
// Параметры:
//	Имя - передаваемое имя запроса.
//
&НаКлиенте
Функция СформироватьИмяКопииЗапроса(Имя)
	ЕстьКопия 	= Истина;
	НомерКопии 	= 1;
	
	Пока ЕстьКопия Цикл 
		ФормируемоеИмяЗапроса = НСтр("ru = '%ИмяЗапроса% (Копия %НомерКопии%)'");
		ФормируемоеИмяЗапроса = СтрЗаменить(ФормируемоеИмяЗапроса, "%ИмяЗапроса%", Имя);
		ФормируемоеИмяЗапроса = СтрЗаменить(ФормируемоеИмяЗапроса, "%НомерКопии%", НомерКопии);
		
		Фильтр = Новый Структура;
		Фильтр.Вставить("Имя", ФормируемоеИмяЗапроса);
		
		МассивЗапросовПоФильтру = Объект.Запросы.НайтиСтроки(Фильтр);
		
		Если МассивЗапросовПоФильтру.Количество() = 0 Тогда 
			ЕстьКопия = Ложь;
		КонецЕсли;	
		
		НомерКопии 	= НомерКопии + 1;
	КонецЦикла;	
	
	Возврат ФормируемоеИмяЗапроса;
КонецФункции	

&НаКлиенте
Процедура УстановитьЗаголовокФормы(ИмяЗапроса)

	ЗаголовокФормы = НСтр("ru = 'Консоль запросов (%ИмяЗапроса%)'");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%ИмяЗапроса%", ИмяЗапроса);
	Заголовок = ЗаголовокФормы;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьТекстТекущегоЗапроса(ТекстЗапроса)
	
	Для каждого ТекущийЗапрос Из Объект.Запросы Цикл
		
		Если ТекущийЗапрос.Идентификатор = ТекущийЗапрос_Идентификатор Тогда
			
			ТекущийЗапрос.Текст = ТекстЗапроса;

			Если ТекущийЗапрос.Имя = ИмяЗапросаПоУмолчанию Тогда 
				
				ТекущийЗапрос.Имя = ПолучитьИмяЗапроса(ТекстЗапроса);
				УстановитьЗаголовокФормы(ТекущийЗапрос.Имя);

			КонецЕсли;
			
			РаскраситьТекстЗапроса(ТекстЗапроса);

			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказатьСообщениеПользователю(НСтр("ru = 'Выберите запрос.'"), "Объект.Запросы");

КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстЗапроса()

	Если РаскрашиватьТекстЗапроса Тогда
		Возврат СтрЗаменить(ТекстЗапроса_ФД.ПолучитьТекст(), Символы.НПП, " ");
	Иначе
		Возврат ТекстЗапроса_ТД.ПолучитьТекст();
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьВыделенныйТекст()

	Если РаскрашиватьТекстЗапроса Тогда
		Возврат СтрЗаменить(Элементы.ТекстЗапроса_ФД.ВыделенныйТекст, Символы.НПП, " ");
	Иначе
		Возврат Элементы.ТекстЗапроса_ТД.ВыделенныйТекст;
	КонецЕсли;

КонецФункции 

&НаКлиенте
Процедура Обработать(Команда)
	
	ТекущийЗапрос_Текст = ПолучитьТекстЗапроса();
	
	ЕстьИзм = УдалитьНезначащиеСимволы(ТекущийЗапрос_Текст);

	Если ЕстьИзм Тогда
		Модифицированность = Истина;
		ОбновитьТекстТекущегоЗапроса(ТекущийЗапрос_Текст);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметры(Команда)
	ЗаполнитьПараметрыКлиент(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПараметры(Команда)
	ПоказыватьПараметры = не ПоказыватьПараметры;
	Элементы.КнопкаПоказыватьПараметры.Пометка = ПоказыватьПараметры;
	УстановитьВидимостьПараметрыКлиент();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСписокЗапросовКлиент()
	
	Если ПоказыватьСписокЗапросов Тогда
		Элементы.Запросы.Видимость = Истина;
	Иначе
		Элементы.Запросы.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьСписокЗапросовСервер()
	
	Если ПоказыватьСписокЗапросов Тогда
		Элементы.Запросы.Видимость = Истина;
	Иначе
		Элементы.Запросы.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПараметрыКлиент()
	
	Если ПоказыватьПараметры Тогда
		Элементы.Параметры.Видимость = Истина;
	Иначе
		Элементы.Параметры.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьПараметрыСервер()
	
	Если ПоказыватьПараметры Тогда
		Элементы.Параметры.Видимость = Истина;
	Иначе
		Элементы.Параметры.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьТекстЗапросаКлиент()
	
	Если ПоказыватьЗапрос Тогда
		Если РаскрашиватьТекстЗапроса Тогда
			Элементы.ТекстЗапроса_ТД.Видимость = Ложь;
			Элементы.ТекстЗапроса_ФД.Видимость = Истина;
		Иначе
			Элементы.ТекстЗапроса_ТД.Видимость = Истина;
			Элементы.ТекстЗапроса_ФД.Видимость = Ложь;
		КонецЕсли; 
	Иначе
		Элементы.ТекстЗапроса_ТД.Видимость = Ложь;
		Элементы.ТекстЗапроса_ФД.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьТекстЗапросаСервер()
	
	Если ПоказыватьЗапрос Тогда
		Если РаскрашиватьТекстЗапроса Тогда
			Элементы.ТекстЗапроса_ТД.Видимость = Ложь;
			Элементы.ТекстЗапроса_ФД.Видимость = Истина;
		Иначе
			Элементы.ТекстЗапроса_ТД.Видимость = Истина;
			Элементы.ТекстЗапроса_ФД.Видимость = Ложь;
		КонецЕсли; 
	Иначе
		Элементы.ТекстЗапроса_ТД.Видимость = Ложь;
		Элементы.ТекстЗапроса_ФД.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультата(Команда)
	
	Если не ЗначениеЗаполнено(ТекущийЗапрос_АдресРезультата) Тогда
		Возврат; 
	КонецЕсли; 
	
	ПараметрыЗапроса = Объект.Параметры.НайтиСтроки(Новый Структура("ИдентификаторЗапроса",ТекущийЗапрос_Идентификатор));
	СписПар = Новый СписокЗначений;
	Для Каждого стрПар Из ПараметрыЗапроса Цикл
		СписПар.Добавить(стрПар.Имя, стрПар.Значение);
	КонецЦикла; 
	
	СписКол = Новый СписокЗначений; 
	Для Каждого стрКол Из ТекущийЗапрос_СписокКолонок Цикл
		СписКол.Добавить(стрКол.Значение);
	КонецЦикла; 
	
	ПараметрыФ = Новый Структура;
	ПараметрыФ.Вставить("Параметры", СписПар);
	ПараметрыФ.Вставить("КодДляВыполнения", КодДляВыполнения);
	ПараметрыФ.Вставить("Колонки", СписКол);
	
	Путь = Объект.ПутьКФормам + "." + "ОбработкаРезультата";
	ОткрытьФорму(Путь, ПараметрыФ,,,,, Новый ОписаниеОповещения("ОбработкаРезультатаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КодДляВыполнения = СтрЗаменить(Результат, Символы.НПП, " ");   
	Если КодДляВыполнения <> Неопределено и ЗначениеЗаполнено(КодДляВыполнения) Тогда
		ОбработкаРезультатаСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаСервер()
	
	ТаблицаРезультатов = ПолучитьИзВременногоХранилища(ТекущийЗапрос_АдресРезультата);
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		Возврат; 
	КонецЕсли; 
	
	ОбъектПараметры = Объект.Параметры.НайтиСтроки(Новый Структура("ИдентификаторЗапроса",ТекущийЗапрос_Идентификатор));
	ПараметрыЗапроса = Новый Структура();
	Для Каждого Параметр Из ОбъектПараметры Цикл
		ПарЗначение = Параметр.Значение;
		Если Не ЗначениеЗаполнено(ПарЗначение) Тогда
			ПараметрыЗапроса.Вставить(Параметр.Имя, Неопределено);
		Иначе
			ПараметрыЗапроса.Вставить(Параметр.Имя, ЗначениеИзСтрокиВнутр(Параметр.Значение));
		КонецЕсли;
	КонецЦикла; 

	Попытка
		Выполнить(КодДляВыполнения);
	Исключение
		ПоказатьСообщениеПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказыватьЗапрос(Команда)
	ПоказыватьЗапрос = не ПоказыватьЗапрос;
	Элементы.КнопкаПоказыватьЗапрос.Пометка = ПоказыватьЗапрос;
	УстановитьВидимостьТекстЗапросаКлиент()
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимости()
	
	Элементы.КнопкаПоказыватьЗапрос.Пометка = ПоказыватьЗапрос;
	Элементы.КнопкаПоказыватьПараметры.Пометка = ПоказыватьПараметры;
	Элементы.КнопкаПоказыватьЗапросы.Пометка = ПоказыватьСписокЗапросов;
	Элементы.КнопкаРаскрашиватьТекстЗапроса.Пометка = РаскрашиватьТекстЗапроса;
	
	УстановитьВидимостьТекстЗапросаСервер();
	УстановитьВидимостьПараметрыСервер();
	УстановитьВидимостьСписокЗапросовСервер();
		
	Если Объект.ТипОбхода = "Дерево" Тогда
		Элементы.ФормаГруппаТипОбхода.Заголовок = "В дерево";
		Элементы.ФормаРезультатЗапросаВДерево.Пометка = Истина;
		Элементы.ФормаРезультатЗапросаВСписок.Пометка = Ложь;
		Элементы.ФормаРезультатЗапросаАвто.Пометка = Ложь;
	ИначеЕсли Объект.ТипОбхода = "Список" Тогда 
		Элементы.ФормаГруппаТипОбхода.Заголовок = "В список";
		Элементы.ФормаРезультатЗапросаВДерево.Пометка = Ложь;
		Элементы.ФормаРезультатЗапросаВСписок.Пометка = Истина;
		Элементы.ФормаРезультатЗапросаАвто.Пометка = Ложь;
	Иначе 
		Элементы.ФормаГруппаТипОбхода.Заголовок = "Авто";
		Элементы.ФормаРезультатЗапросаВДерево.Пометка = Ложь;
		Элементы.ФормаРезультатЗапросаВСписок.Пометка = Ложь;
		Элементы.ФормаРезультатЗапросаАвто.Пометка = Истина;
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура РаскраситьТекстЗапроса(ТЗ)
	
	Если НЕ РаскрашиватьТекстЗапроса Тогда
		ТекстЗапроса_ТД.УстановитьТекст(ТЗ);
	Иначе
		ТекстЗапроса_ФД.УстановитьФорматированнуюСтроку(ПолучитьРаскрашенныйТекст(ТЗ));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ПрочитатьФайлЗапросовВеб();
	#Иначе
		ПрочитатьФайлЗапросов(Неопределено, Неопределено);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗапросыПриАктивизацииСтроки(Элемент)
	
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		ТекущийЗапрос_Идентификатор = "";
		ТекущийЗапрос_Текст = "";
		ТекущийЗапрос_АдресРезультата = Неопределено;
	    
		Если Не ПустаяСтрока(МассивРезультатовЗапросовАдрес) Тогда
			УдалитьИзВременногоХранилища(МассивРезультатовЗапросовАдрес);
			МассивРезультатовЗапросовАдрес = "";
		КонецЕсли;
		
		ОбновитьФормуКлиент(""); 
		Возврат; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТД.Идентификатор) И ТекущийЗапрос_Идентификатор <> ТД.Идентификатор Тогда
		
		ТекущийЗапрос_Идентификатор = ТД.Идентификатор;
		ТекущийЗапрос_Текст = ТД.Текст;
		ТекущийЗапрос_АдресРезультата = ТД.АдресРезультатаЗапроса;
		
		Если Не ПустаяСтрока(МассивРезультатовЗапросовАдрес) Тогда
			УдалитьИзВременногоХранилища(МассивРезультатовЗапросовАдрес);
			МассивРезультатовЗапросовАдрес = "";
		КонецЕсли;
		
		Если Объект.ВосстанавливатьРезультатЗапросаПриАктивизации Тогда
			ПодключитьОбработчикОжидания("ОтобразитьРезультатЗапросаСЗадержкой_Клиент", 0.1, Истина);
		КонецЕсли; 

		ОбновитьФормуКлиент(ТД.Имя, Ложь);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРезультатЗапросаСЗадержкой_Клиент()

	ОтобразитьРезультатЗапросаСЗадержкой_Сервер();

КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатЗапросаСЗадержкой_Сервер()

	Если не ЗначениеЗаполнено(ТекущийЗапрос_АдресРезультата) Тогда
		Возврат; 
	КонецЕсли; 
	
	РезультатЗапроса = ПолучитьИзВременногоХранилища(ТекущийЗапрос_АдресРезультата);
	ОтобразитьРезультатЗапроса(РезультатЗапроса);

КонецПроцедуры 

&НаКлиенте
Процедура ЗапросыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТД = Элемент.ТекущиеДанные;
		Если ТД = Неопределено Тогда
			Возврат; 
		КонецЕсли;
		
		СтарыйЗапросИД = ТекущийЗапрос_Идентификатор;
		ТекущийЗапрос_Текст = ТД.Текст;
		ТекущийЗапрос_Идентификатор = Новый УникальныйИдентификатор;
		ТД.Идентификатор 	= ТекущийЗапрос_Идентификатор;
		
		Если Копирование Тогда
			ТД.Имя	= СформироватьИмяКопииЗапроса(ТД.Имя);
			СкопироватьПараметрыИзЗапроса(СтарыйЗапросИД);
		Иначе
			ТД.Имя	= ИмяЗапросаПоУмолчанию;
		КонецЕсли;
		
		ОбновитьФормуКлиент(ТД.Имя); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапросКлиент();
КонецПроцедуры

&НаКлиенте
Процедура РаскрашиватьТекстЗапроса(Команда)
	РаскрашиватьТекстЗапроса = НЕ РаскрашиватьТекстЗапроса;
	Элементы.КнопкаРаскрашиватьТекстЗапроса.Пометка = РаскрашиватьТекстЗапроса;
	УстановитьВидимостьТекстЗапросаКлиент();
	
	РаскраситьТекстЗапроса(ТекущийЗапрос_Текст);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		УстановитьЗаголовокФормы("");
	Иначе
		УстановитьЗаголовокФормы(ТД.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаАвто(Команда)
	
	Объект.ТипОбхода = "Авто";
	Элементы.ФормаГруппаТипОбхода.Заголовок = "Авто";
	Элементы.ФормаРезультатЗапросаВДерево.Пометка = Ложь;
	Элементы.ФормаРезультатЗапросаВСписок.Пометка = Ложь;
	Элементы.ФормаРезультатЗапросаАвто.Пометка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРезультат(Команда)
	
	Инд = Найти(Команда.Имя, "_");
	Если Инд = 0 Тогда
		Возврат; 
	КонецЕсли; 
	
	НомерКомандыСтр = Сред(Команда.Имя, Инд+1);
	Попытка
		НомерКоманды = Число(НомерКомандыСтр);
	Исключение
		ПоказатьСообщениеПользователю(НСтр("ru = 'Ошибка получения номера результата'"));
		Возврат; 
	КонецПопытки; 
	
	КнопкаРезультатСервер(НомерКоманды);
	
КонецПроцедуры

&НаСервере
Процедура КнопкаРезультатСервер(НомерРезультата)

	Если Не ЗначениеЗаполнено(МассивРезультатовЗапросовАдрес) Тогда
		Возврат; 
	КонецЕсли; 
	
	МассивРезультатовЗапросов = ПолучитьИзВременногоХранилища(МассивРезультатовЗапросовАдрес);
	Если ТипЗнч(МассивРезультатовЗапросов) <> Тип("Массив") Тогда
		Возврат; 
	КонецЕсли; 
	Если НомерРезультата > МассивРезультатовЗапросов.Количество() - 1 Тогда
		Возврат; 
	КонецЕсли; 
	
	СтрокаРезультат = МассивРезультатовЗапросов[НомерРезультата];
	ОтобразитьРезультатЗапроса(СтрокаРезультат.РезультатЗапроса);
	
КонецПроцедуры 

&НаКлиенте
Процедура РезультатЗапросаТабВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаИмя = Элемент.Имя;
	ПолеИмя = Поле.Имя;
	
	ИмяКолонки = СтрЗаменить(ПолеИмя, ТаблицаИмя + "_", "");
	СодержимоеЯчейки = ТД[ИмяКолонки];
	
	ЭтоРезультатЗапроса = (Прав(ИмяКолонки, 3) = "_ТЗ" И СодержимоеЯчейки = "<Результат запроса>");
	ЭтоМоментВремени = (Прав(ИмяКолонки, 7) = "_Момент" И СодержимоеЯчейки = "<Момент времени>");
	
	Если ЭтоРезультатЗапроса Или ЭтоМоментВремени Тогда
		
		Если ЭтоРезультатЗапроса Тогда
			ИмяКолонки = Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 3);
		Иначе
			ИмяКолонки = Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 7);
		КонецЕсли;
		
		Если Элемент.Имя = "РезультатЗапросаДер" Тогда
			Коллекция = РезультатЗапросаДер.НайтиПоИдентификатору(ВыбраннаяСтрока);
			ЭлементыДерева = РезультатЗапросаДер.ПолучитьЭлементы();
			ИндексРодителя = ЭлементыДерева.Индекс(Коллекция.ПолучитьРодителя());
			ИндексСтроки = ЭлементыДерева[ИндексРодителя].ПолучитьЭлементы().Индекс(Коллекция);
			
			ПараметрыСпецТипа = Новый Структура("АдресХранилища, ИмяКолонки, ИндексСтроки, ИндексРодителя", ТекущийЗапрос_АдресРезультата, ИмяКолонки, ИндексСтроки, ИндексРодителя); 
		Иначе
			ИндексСтроки = РезультатЗапросаТаб.Индекс(РезультатЗапросаТаб.НайтиПоИдентификатору(ВыбраннаяСтрока));
			ПараметрыСпецТипа = Новый Структура("АдресХранилища, ИмяКолонки, ИндексСтроки", ТекущийЗапрос_АдресРезультата, ИмяКолонки, ИндексСтроки); 
		КонецЕсли;
		
		Если ЭтоРезультатЗапроса Тогда
			ОткрытьФорму(Объект.ПутьКФормам + "." + "РасшифровкаРезультатЗапроса", ПараметрыСпецТипа, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе
			ОткрытьФорму(Объект.ПутьКФормам + "." + "СложныйТип_МоментВремени", ПараметрыСпецТипа, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	Иначе
		ПоказатьЗначение(, СодержимоеЯчейки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВExcel(Команда)
	
#Если НЕ ВебКлиент Тогда
	Попытка
		ТабДок = ОткрытьВExcel_Сервер(Этаформа.ТекущийЭлемент.Имя);
		
		ВремФайл = ПолучитьИмяВременногоФайла("XLS");
		
		ТабДок.Записать(ВремФайл, ТипФайлаТабличногоДокумента.XLS);
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОткрытьВExcel_Заверешение", ЭтотОбъект), ВремФайл);
	Исключение
		ПоказатьПредупреждение(, "Ошибка открытия в Excel: " + ОписаниеОшибки()); 
	КонецПопытки; 
#КонецЕсли

КонецПроцедуры

Процедура ОткрытьВExcel_Заверешение(Реузльтат, ДополнительныйПараметр) Экспорт 
КонецПроцедуры

&НаСервере
Функция ОткрытьВExcel_Сервер(Имя)

	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(РеквизитФормыВЗначение(Имя));
	ТабДок= Новый ТабличныйДокумент; 
	Построитель.Вывести(ТабДок); 
	
	Возврат ТабДок; 

КонецФункции 


#Область Раскраска

&НаКлиенте
Функция ПолучитьРаскрашенныйТекст(Знач ТЗ) Экспорт 

	Цвет_КлючевыеСлова = WebЦвета.Синий;
	Цвет_Функции = WebЦвета.ТемноБордовый;
	Цвет_Комментарии = WebЦвета.Зеленый;
	Цвет_Параметр = WebЦвета.ЦианНейтральный;
	Цвет_Число = WebЦвета.Фуксия;
	Цвет_Текст = WebЦвета.Черный;
	
	СимволыНПП = Символы.НПП;
	
	ТЗ = СтрЗаменить(ТЗ, Символы.Таб, "    ");
	ТЗ = СтрЗаменить(ТЗ, СимволыНПП, " ");
	МассивФМС = Новый Массив;
	
	МассивСтрок = ИзСтрокиСРазделителями(ТЗ, Символы.ПС);
	КолСтрок = МассивСтрок.Количество();
	Для индСтрока = 0 По КолСтрок - 1 Цикл
		
		стрСтрока = МассивСтрок[индСтрока];
		
		Если Лев(СокрЛ(стрСтрока), 2)	= "//" Тогда
			МассивФМС.Добавить(Новый Структура("Строка, Цвет", стрСтрока, Цвет_Комментарии));
		Иначе
			ПроверяемаяСтрока = ВРег(стрСтрока);
			Если форматирование_ЭтоПолноеКлючевоеСлово(ПроверяемаяСтрока) Тогда
				МассивФМС.Добавить(Новый Структура("Строка, Цвет", ПроверяемаяСтрока, Цвет_КлючевыеСлова));
			Иначе
				
				МассивСлов = ПолучитьСписокСлов(стрСтрока);
				КолСлов = МассивСлов.Количество();
				Для индСлово = 0 По КолСлов - 1 Цикл
					
					стрСлово = МассивСлов[индСлово];
					
					Если ТипЗнч(стрСлово) = Тип("Структура") Тогда
						МассивФМС.Добавить(стрСлово);
						Продолжить;
					КонецЕсли;
					
					ПроверяемоеСлово = ВРег(стрСлово);
					
					Если форматирование_ЭтоПараметр(стрСлово) Тогда
						МассивФМС.Добавить(Новый Структура("Строка, Цвет", стрСлово, Цвет_Параметр));
					ИначеЕсли форматирование_ЭтоКлючевоеСлово(ПроверяемоеСлово) Тогда
						МассивФМС.Добавить(Новый Структура("Строка, Цвет", ПроверяемоеСлово, Цвет_КлючевыеСлова));
					ИначеЕсли форматирование_ЭтоФункция(ПроверяемоеСлово) Тогда
						МассивФМС.Добавить(Новый Структура("Строка, Цвет", ПроверяемоеСлово,Цвет_Функции));
					ИначеЕсли форматирование_ЭтоЧисло(стрСлово) Тогда
						МассивФМС.Добавить(Новый Структура("Строка, Цвет", стрСлово, Цвет_Число));
					Иначе  
						МассивФМС.Добавить(Новый Структура("Строка, Цвет", стрСлово, Цвет_Текст));
					КонецЕсли; 
					
				КонецЦикла;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если индСтрока < КолСтрок - 1 Тогда
			МассивФМС.Добавить(Новый Структура("Строка, Цвет", Символы.ПС, ""));
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если МассивФМС.Количество() = 0 Тогда
		Возврат Новый ФорматированнаяСтрока("");
	КонецЕсли;
	
	ФМС_Строка = "";
	ПредЦвет = МассивФМС[0].Цвет;
	Если ПредЦвет = "" Тогда
		ПредЦвет = Цвет_Текст;
	КонецЕсли;
	ФМС = Новый ФорматированнаяСтрока("");
	МассивФМСРез= Новый Массив;
	
	Для Каждого стрСлово Из МассивФМС Цикл
		Если стрСлово.Цвет = "" ИЛИ ПредЦвет = стрСлово.Цвет Тогда
			ФМС_Строка = ФМС_Строка + стрСлово.Строка;	
		Иначе
			Если ПредЦвет = Цвет_Текст Тогда
				МассивФМСРез.Добавить(ФМС_Строка);
			Иначе
				МассивФМСРез.Добавить(Новый ФорматированнаяСтрока(ФМС_Строка,,ПредЦвет));
			КонецЕсли;
			
			ФМС_Строка = стрСлово.Строка;
			ПредЦвет = стрСлово.Цвет;
		КонецЕсли; 
	КонецЦикла;
	Если ПредЦвет = Цвет_Текст Тогда
		МассивФМСРез.Добавить(ФМС_Строка);
	Иначе
		МассивФМСРез.Добавить(Новый ФорматированнаяСтрока(ФМС_Строка,,ПредЦвет));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивФМСРез);

КонецФункции

&НаКлиенте
Функция ИзСтрокиСРазделителями(Знач вхСтр, вхРазделитель)
	
	Массив = Новый Массив;
	вхСтр = СтрЗаменить(вхСтр, вхРазделитель, Символы.ПС);
	ЧислоСтрок = СтрЧислоСтрок(вхСтр);
	Для Счетчик = 1 По ЧислоСтрок Цикл 
		Массив.Добавить(СтрПолучитьСтроку(вхСтр, Счетчик));
	КонецЦикла;
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСлов(Знач вхСтр)
	
	Цвет_КлючевыеСлова = WebЦвета.Синий;
	Цвет_Строка = WebЦвета.Красный;
	
	МассивРезультат = Новый Массив;
	
	ТекущееСлово = "";
	СтрДлинаСтр = СтрДлина(вхСтр);
	
	Для Поз = 1 По СтрДлинаСтр Цикл
		ТекущийСимвол = Сред(вхСтр, Поз, 1);
		
		Если ТекущийСимвол = " " Тогда
			
			Если ЗначениеЗаполнено(ТекущееСлово) Тогда
				МассивРезультат.Добавить(ТекущееСлово);
				ТекущееСлово = "";
			КонецЕсли;
			
			Пока ТекущийСимвол = " " и Поз <= СтрДлинаСтр Цикл
				ТекущееСлово = ТекущееСлово + Символы.НПП;
				Поз = Поз + 1;
				ТекущийСимвол = Сред(вхСтр, Поз, 1);
			КонецЦикла;
			МассивРезультат.Добавить(Новый Структура("Строка, Цвет", ТекущееСлово, ""));
			
			ТекущееСлово = "";
			
		КонецЕсли;
			
		Если Найти(",()=+-*<>'", ТекущийСимвол) > 0 Тогда
			
			Если ЗначениеЗаполнено(ТекущееСлово) Тогда
				МассивРезультат.Добавить(ТекущееСлово);
			КонецЕсли;
			
			Если ТекущийСимвол = ">" Тогда
				МассивРезультат.Добавить(Новый Структура("Строка, Цвет", "&gt;", Цвет_КлючевыеСлова));
			Иначе
				МассивРезультат.Добавить(Новый Структура("Строка, Цвет", ТекущийСимвол, Цвет_КлючевыеСлова));
			КонецЕсли; 
			
			ТекущееСлово = "";
			
		ИначеЕсли ТекущийСимвол = """" Тогда
			
			Если ЗначениеЗаполнено(ТекущееСлово) Тогда
				МассивРезультат.Добавить(ТекущееСлово);
				ТекущееСлово = "";
			КонецЕсли;
			
			ТекущееСлово = """";
			Поз = Поз + 1;
			ТекущийСимвол = Сред(вхСтр, Поз, 1);

			Пока ТекущийСимвол <> """" и Поз <= СтрДлинаСтр Цикл
				ТекущееСлово = ТекущееСлово + ТекущийСимвол;
				Поз = Поз + 1;
				ТекущийСимвол = Сред(вхСтр, Поз, 1);
			КонецЦикла;
			МассивРезультат.Добавить(Новый Структура("Строка, Цвет", ТекущееСлово + """", Цвет_Строка));
			
			ТекущееСлово = "";
			
		Иначе
			
			ТекущееСлово = ТекущееСлово + ТекущийСимвол;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущееСлово) Тогда
		МассивРезультат.Добавить(ТекущееСлово);
	КонецЕсли; 

	Возврат МассивРезультат;
	
КонецФункции

&НаКлиенте
Функция форматирование_ЭтоПараметр(стрСлово)
	Возврат Лев(стрСлово,1) = "&"; 
КонецФункции

&НаКлиенте
Функция форматирование_ЭтоФункция(стрСлово)

	СписокКлючевыхСлов = ";ПРЕДСТАВЛЕНИЕССЫЛКИ;ДОБАВИТЬКДАТЕ;РАЗНОСТЬДАТ;И;ИЛИ;НЕ;ИСТИНА;ЛОЖЬ;NULL;НЕОПРЕДЕЛЕНО;МЕЖДУ;В;ИЕРАРХИИ;ЕСТЬ;ПОДОБНО;СПЕЦСИМВОЛ;СУММА;МАКСИМУМ;МИНИМУМ;СРЕДНЕЕ;КОЛИЧЕСТВО;ДАТАВРЕМЯ;ПОДСТРОКА;ГОД;МЕСЯЦ;ДЕНЬ;ЧАС;МИНУТА;СЕКУНДА;КВАРТАЛ;НЕДЕЛЯ;ДЕНЬГОДА;ДЕНЬНЕДЕЛИ;НАЧАЛОПЕРИОДА;КОНЕЦПЕРИОДА;ЕСТЬNULL;ВЫБОР;КОГДА;ТОГДА;ИНАЧЕ;КОНЕЦ;ВЫРАЗИТЬ;ЗНАЧЕНИЕ;ПРЕДСТАВЛЕНИЕ;OR;AND;NOT;TRUE;FALSE;UNDIFENED;BETWEEN;IN;HIERARCHY;REF;IS;LIKE;ESCAPE;SUM;MAX;MIN;AVD;COUNT;DATATIME;SUBSTRING;YEAR;MOUNT;DAY;HOUR;MINUTE;SECOND;QUARTER;WEEK;DAYYEAR;DAYWEEK;BEGINOFPERIOD;ENDOFPERIOD;ISNULL;CASE;WHEN;THEN;ELSE;END;CAST;VALUE;PRESENTATION;";
	Возврат Найти(СписокКлючевыхСлов, ";"+стрСлово+";");
	
КонецФункции

&НаКлиенте
Функция форматирование_ЭтоПолноеКлючевоеСлово(стрСлово)
	
	ПроверяемоеСлово = СокрЛП(стрСлово);
	
	Если 
		ПроверяемоеСлово = "ВЫБРАТЬ" ИЛИ 
		ПроверяемоеСлово = "ИЗ" ИЛИ 
		ПроверяемоеСлово = "ГДЕ" ИЛИ 
		ПроверяемоеСлово = "ОБЪЕДИНИТЬ ВСЕ" ИЛИ 
		ПроверяемоеСлово = "СГРУППИРОВАТЬ ПО" ИЛИ 
		ПроверяемоеСлово = "УПОРЯДОЧИТЬ ПО" ИЛИ 
		ПроверяемоеСлово = "ИТОГИ ПО" ИЛИ 
		ПроверяемоеСлово = "ВЫБРАТЬ РАЗЛИЧНЫЕ" ИЛИ 
		ПроверяемоеСлово = "ДЛЯ ИЗМЕНЕНИЯ" ИЛИ 
		ПроверяемоеСлово = "ИНДЕКСИРОВАТЬ ПО"  
		Тогда
		
		Возврат Истина; 
		
	КонецЕсли;
	
	Возврат Ложь; 

КонецФункции
	
&НаКлиенте
Функция форматирование_ЭтоКлючевоеСлово(стрСлово)

	ПроверяемоеСлово = СокрЛП(стрСлово);
	
	СписокКлючевыхСлов = ";КАК;СОЕДИНЕНИЕ;ЛЕВОЕ;ВЫБРАТЬ;РАЗЛИЧНЫЕ;ПЕРВЫЕ;ИЗ;ГДЕ;УПОРЯДОЧИТЬ;ПО;АВТОУПОРЯДОЧИВАНИЕ;СГРУППИРОВАТЬ;ИТОГИ;ОБЩИЕ;ПРАВОЕ;ПОЛНОЕ;ВНЕШНЕЕ;ВНУТРЕННЕЕ;УБЫВ;ВОЗР;ИМЕЮЩИЕ;ОБЪЕДИНИТЬ;ВСЕ;ДЛЯ;ИЗМЕНЕНИЯ;ПОМЕСТИТЬ;ИНДЕКСИРОВАТЬ;УНИЧТОЖИТЬ;БУЛЕВО;ЧИСЛО;ТОЛЬКО;ИЕРАРХИЯ;ПЕРИОДАМИ;ТИПЗНАЧЕНИЯ;SELECT;DESTINCT;TOP;FROM;WHERE;AS;ORDER;BY;AUTOORDER;GROUP;TOTALS;OVERALL;LEFT;RIGHT;FULL;OUTER;INNER;JOIN;ON;DESC;ASK;HAVING;UNION;ALL;FOR;UPDATE;OF;INTO;INDEX;DROP;BOOLEAN;NUMBER;ONLY;HIERARCHY;PERIODS;";
	Возврат Найти(СписокКлючевыхСлов, ";"+ПроверяемоеСлово+";");
	
КонецФункции

&НаКлиенте
Функция форматирование_ЭтоЧисло(стрСлово)
	
	ЛевСимв = Лев(стрСлово, 1);
	Если ЛевСимв >= "0" и ЛевСимв <= "9" Тогда
		Возврат Истина; 
	КонецЕсли; 
	
	Возврат Ложь; 

КонецФункции
#КонецОбласти

&НаКлиенте
Процедура ЗначениеВФормеОчистка(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.Параметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	ТекДанные.Тип = "";
	ТекДанные.Значение = "";
	ТекДанные.ПредставлениеТипа = "";
	ТекДанные.ПредставлениеЗначения = "";
	
	Элемент.ПодсказкаВвода = "<Тип не выбран>";
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элементы.Параметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекПоле = Элементы.Параметры.ТекущийЭлемент;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Тип) Тогда
		ТекПоле.ПодсказкаВвода = "<Тип не выбран>";
	Иначе
		ТекПоле.ПодсказкаВвода = "<" + ТекДанные.ПредставлениеТипа + ">";
	КонецЕсли;
КонецПроцедуры
