&НаКлиенте
Перем ИмяКолонкиПоУмолчанию;

&НаСервере
Процедура УдалитьЭлементыФормы_КолонкиТаблицы(Форма, ЭлементТаблица) Экспорт 

	СписокСущКолонок = ЭлементТаблица.ПодчиненныеЭлементы;
	СписокИменКолонок = Новый СписокЗначений;
	Для Каждого Колонка Из СписокСущКолонок Цикл
		СписокИменКолонок.Добавить(Колонка.Имя);
	КонецЦикла; 
	
	Для Каждого Колонка Из СписокИменКолонок Цикл
		Форма.Элементы.Удалить(Форма.Элементы.Найти(Колонка.Значение));
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УдалитьДобавитьКолонки_ТаблицаЗначений(Форма, СоздаваемаяТаблицаЗначений, ИмяРеквизитаФормы, ИмяЭлементаФормы) Экспорт

	ЭлементТаблица = Форма.Элементы[ИмяЭлементаФормы];
	УдалитьЭлементыФормы_КолонкиТаблицы(Форма, ЭлементТаблица);
	          
	МассивНовыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов = Новый Массив;

	Для Каждого Колонка Из СоздаваемаяТаблицаЗначений.Колонки Цикл
		НовыйТип = Новый ОписаниеТипов(Колонка.ТипЗначения,,"Null");
		
		МассивНовыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, НовыйТип, ИмяРеквизитаФормы, Колонка.Заголовок));
	КонецЦикла;
	
	МассивСуществующихРеквизитов = Форма.ПолучитьРеквизиты(ИмяРеквизитаФормы);
	Для Каждого УдаляемыйРеквизит Из МассивСуществующихРеквизитов Цикл
		МассивУдаляемыхРеквизитов.Добавить(УдаляемыйРеквизит.Путь+"."+УдаляемыйРеквизит.Имя);
	КонецЦикла; 
	
	Форма.ИзменитьРеквизиты(МассивНовыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	ЗначениеВДанныеФормы(СоздаваемаяТаблицаЗначений, Форма[ИмяРеквизитаФормы]);
	
	Для Каждого Колонка Из СоздаваемаяТаблицаЗначений.Колонки Цикл
	
		КолонкаИмя = Колонка.Имя;
		
		ЭлементКолонка = Форма.Элементы.Добавить(ИмяЭлементаФормы + "_" + КолонкаИмя, Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементКолонка.ПутьКДанным = ИмяРеквизитаФормы + "." + КолонкаИмя;
	
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Значение") И ЗначениеЗаполнено(Параметры.Значение) Тогда
		ПараметрЗначение = ЗначениеИзСтрокиВнутр(Параметры.Значение);
		Если ЗначениеЗаполнено(ПараметрЗначение) Тогда
			УдалитьДобавитьКолонки_ТаблицаЗначений(ЭтаФорма, ПараметрЗначение, "ТаблицаЗначенийПараметр", "ТаблицаЗначенийПараметр");
			
			Для Каждого СтрКол Из ПараметрЗначение.Колонки Цикл
				Настройка 						= НастройкиТаблицыЗначений.Добавить();
				Настройка.НаименованиеКолонки 	= СтрКол.Имя;
				Настройка.ТипКолонки 			= СтрКол.ТипЗначения;
			КонецЦикла;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиТаблицыЗначенийТипКолонкиПриИзменении(Элемент)
	                                                                              
	ТекущаяКолонка 	= Элементы.НастройкиТаблицыЗначений.ТекущиеДанные;
	ТипКолонки      = ТекущаяКолонка.ТипКолонки;
	СтароеИмяКолонки= ТекущаяКолонка.НаименованиеКолонки;
	
	ИзменитьТипКолонкиСервер(СтароеИмяКолонки, ТипКолонки);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТипКолонкиСервер(Имя, НовыйТип)

	ТЗ = РеквизитФормыВЗначение("ТаблицаЗначенийПараметр");
	ТекИндекс = ТЗ.Колонки.Индекс(ТЗ.Колонки[Имя]);
	ТЗ.Колонки[Имя].Имя = Имя + "_стар";
	
	ТЗ.Колонки.Вставить(ТекИндекс, Имя, НовыйТип);
	Для Каждого стр Из ТЗ Цикл
		стр[Имя] = стр[Имя + "_стар"];
	КонецЦикла;
	ТЗ.Колонки.Удалить(ТекИндекс + 1);
	
	УдалитьДобавитьКолонки_ТаблицаЗначений(ЭтаФорма, ТЗ, "ТаблицаЗначенийПараметр", "ТаблицаЗначенийПараметр");

КонецПроцедуры

&НаКлиенте
Процедура НастройкиТаблицыЗначенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	ИдентификаторСтроки 					= Новый УникальныйИдентификатор;
	ИмяКолонки 								= СформироватьИмяКолонки(ИмяКолонкиПоУмолчанию, ИдентификаторСтроки);
	ТипКолонки								= Новый ОписаниеТипов("Строка");
	
	ЭлементНастройки 						= НастройкиТаблицыЗначений.Добавить();
	ЭлементНастройки.НаименованиеКолонки    = ИмяКолонки;
	ЭлементНастройки.ТипКолонки    			= ТипКолонки;
	
	ДобавитьКолонкуСервер(ИмяКолонки, ТипКолонки)
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуСервер(ИмяКолонки, ТипКолонки)

	ТЗ = РеквизитФормыВЗначение("ТаблицаЗначенийПараметр");
	ТЗ.Колонки.Добавить(ИмяКолонки, ТипКолонки);
	
	УдалитьДобавитьКолонки_ТаблицаЗначений(ЭтаФорма, ТЗ, "ТаблицаЗначенийПараметр", "ТаблицаЗначенийПараметр");

КонецПроцедуры 

&НаКлиенте
Процедура НастройкиТаблицыЗначенийНаименованиеКолонкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяКолонкаТЗ 	= Элементы.НастройкиТаблицыЗначений.ТекущиеДанные;
	СтароеИмя 			= ТекущаяКолонкаТЗ.НаименованиеКолонки;
	ТипКолонки          = ТекущаяКолонкаТЗ.ТипКолонки;
	ИдентификаторСтроки	= ТекущаяКолонкаТЗ.ПолучитьИдентификатор();
	
	Текст = УбратьСимволыИзТекста(Текст);
	
	Если Не ПустаяСтрока(Текст) Тогда 	
		НовоеИмя	= СформироватьИмяКолонки(Текст, ИдентификаторСтроки);
	Иначе
		НовоеИмя 	= СформироватьИмяКолонки(ИмяКолонкиПоУмолчанию, ИдентификаторСтроки);
		
		ПоказатьСообщениеПользователю(НСтр("ru = 'Наименование колонки не может быть пустым.'"), "Объект");
	КонецЕсли;
	
	ТекущаяКолонкаТЗ.НаименованиеКолонки = НовоеИмя;
	
	ИзменитьИмяКолонкиСервер(СтароеИмя, НовоеИмя);

КонецПроцедуры

&НаСервере
Процедура ИзменитьИмяКолонкиСервер(СтароеИмя, НовоеИмя)

	ТЗ = РеквизитФормыВЗначение("ТаблицаЗначенийПараметр");
	ТЗ.Колонки[СтароеИмя].Имя = НовоеИмя;
	
	УдалитьДобавитьКолонки_ТаблицаЗначений(ЭтаФорма, ТЗ, "ТаблицаЗначенийПараметр", "ТаблицаЗначенийПараметр");

КонецПроцедуры

&НаКлиенте
Процедура НастройкиТаблицыЗначенийПередУдалением(Элемент, Отказ)
	ТекущаяКолонкаТЗ 	= Элементы.НастройкиТаблицыЗначений.ТекущиеДанные;
	ИмяКолонки 			= ТекущаяКолонкаТЗ.НаименованиеКолонки;
	
	УдалитьКолонкуСервер(ИмяКолонки)
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкуСервер(Имя)

	ТЗ = РеквизитФормыВЗначение("ТаблицаЗначенийПараметр");
	ТЗ.Колонки.Удалить(Имя);
	
	УдалитьДобавитьКолонки_ТаблицаЗначений(ЭтаФорма, ТЗ, "ТаблицаЗначенийПараметр", "ТаблицаЗначенийПараметр");

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура ВыбратьИЗакрыть(Команда)
	ПараметрыПередачи = ПолучитьЗначениеСервер();
	Закрыть(ПараметрыПередачи); 
	Владелец = ЭтотОбъект.ВладелецФормы;
	Владелец.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеСервер()
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗначенийПараметр");
	
	ПредставлениеЗначения = "Таблица: строк = %КоличествоСтрок%, колонок = %КоличествоКолонок%";
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "%КоличествоСтрок%", Строка(ТЗ.Количество()));
	ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, "%КоличествоКолонок%", Строка(ТЗ.Колонки.Количество()));
	
	Возврат Новый Структура("Значение, Представление", ЗначениеВСтрокуВнутр(ТЗ), ПредставлениеЗначения);

КонецФункции
///////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Формирует имя добавляемой колонки.
// Оно не должно совпадать с именем реквизита формы 
// и с именем колонки.
//
// Параметры:
//	Имя - передаваемое имя.
//
&НаКлиенте
Функция СформироватьИмяКолонки(знач ИмяКолонки, ИДТекСтроки)
	НТЗ = НастройкиТаблицыЗначений;
	Флаг = Истина;
	Индекс = 0;
	
	ИмяКолонки = СокрЛП(ИмяКолонки);
	
	Пока Флаг Цикл
		Имя = ИмяКолонки + Строка(Формат(Индекс, "ЧН=-"));
		Имя = СтрЗаменить(Имя, "-", "");
		
		// Если нет строки с таким именем.
		Фильтр = Новый Структура("НаименованиеКолонки", Имя);
		ОтфильтрованныеСтроки = НТЗ.НайтиСтроки(Фильтр);
		Если ОтфильтрованныеСтроки.Количество() = 0 Тогда
			Флаг = Ложь;
		Иначе
			Если ОтфильтрованныеСтроки.Получить(0).ПолучитьИдентификатор() <> ИДТекСтроки Тогда 
				Флаг = Истина;
			Иначе
				Флаг = Ложь;
			КонецЕсли;	
		КонецЕсли;
		
		// Если нет колонки с таким именем.
		Колонки = Элементы.ТаблицаЗначенийПараметр.ПодчиненныеЭлементы;
		КолКолонок = Колонки.Количество();
		Для Индекс = 0 по КолКолонок - 1 Цикл 
			Если Колонки.Получить(Индекс).Имя = Имя Тогда 
				Флаг = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		ВозврЗнач = ?(Флаг, "", Имя);
		
		Индекс = Индекс + 1;
	КонецЦикла; 
	
	Возврат ВозврЗнач;
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщениеПользователю(ТекстСообщения, ПутьКДанным)
	ОчиститьСообщения();
	Сообщение = Новый СообщениеПользователю(); 
    Сообщение.Текст = ТекстСообщения;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.УстановитьДанные(Объект); 
    Сообщение.Сообщить(); 	
КонецПроцедуры	

&НаКлиенте
Функция УбратьСимволыИзТекста(знач Текст)
	ВозврЗнач = "";
	
	ДлинаТекста = СтрДлина(Текст);
	
	Если ДлинаТекста = 0 Тогда 
		Возврат ВозврЗнач;
	КонецЕсли;	
	
	Для Индекс = 0 по ДлинаТекста - 1  Цикл 
		СимволТекста = Лев(Текст, 1);
		Если Не ЭтоСимвол(СимволТекста) Тогда 
			ВозврЗнач = ВозврЗнач + СимволТекста;
		КонецЕсли;	
		Текст = Сред(Текст, 2);
	КонецЦикла;	
	
	Возврат ВозврЗнач;
КонецФункции

&НаКлиенте
Функция ЭтоСимвол(Символ)
	// Символы между 1040 и 1103 - Русские буквы.
	// Символы между 48 и 57 - Цифры.
	// Символы между 65 и 122 - Английские буквы.
	
	Код = КодСимвола(Символ); 
	Если (Код >= 1040 и Код <= 1103) или (Код >= 48 и Код <= 57) или (Код >= 65 и Код <= 122) Тогда 
	  Возврат Ложь; 
	Иначе 
	  Возврат Истина; 
	КонецЕсли; 
КонецФункции	

///////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ИмяКолонкиПоУмолчанию 	= "Колонка";

